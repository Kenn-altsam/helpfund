#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ fallback parsing —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
"""

import re
import json
from typing import Optional, List, Dict, Any

def extract_location_simple(text: str) -> Optional[str]:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not text:
        return None
        
    text_lower = text.lower()
    
    # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ)
    location_patterns = {
        "–∞–ª–º–∞—Ç–µ": "–ê–ª–º–∞—Ç—ã",
        "–∞–ª–º–∞—Ç—ã": "–ê–ª–º–∞—Ç—ã", 
        "–∞—Å—Ç–∞–Ω–µ": "–ê—Å—Ç–∞–Ω–∞",
        "–∞—Å—Ç–∞–Ω–∞": "–ê—Å—Ç–∞–Ω–∞",
        "—É–ª—ã—Ç–∞—É—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏": "–£–ª—ã—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "—É–ª—ã—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å": "–£–ª—ã—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–æ–±–ª–∞—Å—Ç–∏ —É–ª—ã—Ç–∞—É": "–£–ª—ã—Ç–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–æ–±–ª–∞—Å—Ç–∏ –∞–ª–º–∞—Ç—ã": "–ê–ª–º–∞—Ç–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–æ–±–ª–∞—Å—Ç–∏ –∞—Ç—ã—Ä–∞—É": "–ê—Ç—ã—Ä–∞—É—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–æ–±–ª–∞—Å—Ç–∏ –∫–∞—Ä–∞–≥–∞–Ω–¥–∞": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å",
        "–∫–∞—Ä–∞–≥–∞–Ω–¥–µ": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
        "–∫–∞—Ä–∞–≥–∞–Ω–¥–∞": "–ö–∞—Ä–∞–≥–∞–Ω–¥–∞"
    }
    
    for pattern, canonical in location_patterns.items():
        if pattern in text_lower:
            return canonical
    
    return None

def parse_intent_fallback_simple(user_input: str, history: List[Dict[str, str]]) -> Dict[str, Any]:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π fallback parsing –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"üîÑ [FALLBACK_PARSER] –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback parsing –¥–ª—è: {user_input}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª–æ–∫–∞—Ü–∏—é
    location = extract_location_simple(user_input)
    
    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    quantity = 10  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    quantity_patterns = [
        (r'(\d+)\s*–∫–æ–º–ø–∞–Ω', r'\1'),
        (r'–Ω–∞–π–¥–∏\s*(\d+)', r'\1'),
        (r'–ø–æ–∫–∞–∂–∏\s*(\d+)', r'\1'),
        (r'–¥–∞–π\s*(\d+)', r'\1'),
    ]
    
    for pattern, replacement in quantity_patterns:
        match = re.search(pattern, user_input.lower())
        if match:
            try:
                quantity = int(match.group(1))
                break
            except ValueError:
                continue
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
    continuation_keywords = [
        '–µ—â–µ', '–µ—â—ë', '–¥–∞–ª—å—à–µ', '—Å–ª–µ–¥—É—é—â–∏–µ', '—Å–ª–µ–¥—É—é—â–∞—è', '–ø—Ä–æ–¥–æ–ª–∂–∏', '–ø—Ä–æ–¥–æ–ª–∂–∞–π',
        'more', 'next', 'continue', '–¥–∞–π –µ—â–µ', '–¥–∞–π –µ—â—ë', '–ø–æ–∫–∞–∂–∏ –µ—â–µ', '–ø–æ–∫–∞–∂–∏ –µ—â—ë'
    ]
    
    is_continuation = any(keyword in user_input.lower() for keyword in continuation_keywords)
    
    # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
    page_number = 1
    if is_continuation and history:
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ —Å parsed_intent
        for msg in reversed(history):
            if msg.get('role') == 'assistant' and 'parsed_intent' in msg:
                try:
                    last_intent = json.loads(msg['parsed_intent'])
                    page_number = last_intent.get('page_number', 1) + 1
                    quantity = last_intent.get('quantity', 10)
                    break
                except (json.JSONDecodeError, KeyError):
                    continue
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º intent
    if is_continuation and history:
        # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in reversed(history):
            if msg.get('role') == 'assistant' and 'parsed_intent' in msg:
                try:
                    last_intent = json.loads(msg['parsed_intent'])
                    if last_intent.get('location'):
                        location = last_intent.get('location')
                        break
                except (json.JSONDecodeError, KeyError):
                    continue
    
    intent = "find_companies" if location else "unclear"
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–æ–π –ø–æ–¥—Ö–æ–¥)
    activity_keywords = None
    
    # –û–±—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–∏–∑–Ω–µ—Å-–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    business_keywords = [
        '—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω', '—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω', '—Ç–æ—Ä–≥–æ–≤', '–ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤', '—É—Å–ª—É–≥', '–º–µ–¥–∏—Ü–∏–Ω—Å–∫',
        '–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω', '—Ñ–∏–Ω–∞–Ω—Å–æ–≤', '–±–∞–Ω–∫–æ–≤—Å–∫', '—Å—Ç—Ä–∞—Ö–æ–≤', '–Ω–µ—Ñ—Ç–µ–≥–∞–∑–æ–≤', '–≥–æ—Ä–Ω–æ–¥–æ–±—ã–≤–∞—é—â',
        '—Å–µ–ª—å—Å–∫–æ—Ö–æ–∑—è–π—Å—Ç–≤–µ–Ω–Ω', '–ø–∏—â–µ–≤', '—Ç–µ–∫—Å—Ç–∏–ª—å–Ω', '—Ö–∏–º–∏—á–µ—Å–∫', '–º–µ—Ç–∞–ª–ª—É—Ä–≥–∏—á–µ—Å–∫',
        '—ç–ª–µ–∫—Ç—Ä–æ—Ç–µ—Ö–Ω–∏—á–µ—Å–∫', '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω', '—Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–æ–Ω–Ω', '–≥–æ—Å—Ç–∏–Ω–∏—á–Ω', '—Ä–µ—Å—Ç–æ—Ä–∞–Ω–Ω'
    ]
    
    # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–∏–∑–Ω–µ—Å-–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–æ –≤–≤–æ–¥–µ
    found_keywords = []
    for keyword in business_keywords:
        if keyword in user_input.lower():
            found_keywords.append(keyword)
    
    if found_keywords:
        activity_keywords = found_keywords
    
    result = {
        "intent": intent,
        "location": location,
        "activity_keywords": activity_keywords,
        "quantity": quantity,
        "page_number": page_number,
        "reasoning": f"Fallback parsing –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∏–∑-–∑–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Gemini API. –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –ª–æ–∫–∞—Ü–∏—è: {location}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}, —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {page_number}",
        "preliminary_response": "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å..." if intent == "find_companies" else "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ–±–ª–∞—Å—Ç—å –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π."
    }
    
    print(f"‚úÖ [FALLBACK_PARSER] –†–µ–∑—É–ª—å—Ç–∞—Ç fallback parsing: {result}")
    return result

def test_full_fallback():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π fallback parsing —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏"""
    
    test_cases = [
        "10 –∫–æ–º–ø–∞–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –£–ª—ã—Ç–∞—É",
        "–ù–∞–π–¥–∏ 5 –∫–æ–º–ø–∞–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –ê–ª–º–∞—Ç—ã", 
        "–ü–æ–∫–∞–∂–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ê—Ç—ã—Ä–∞—É",
        "–î–∞–π 15 –∫–æ–º–ø–∞–Ω–∏–π –≤ –æ–±–ª–∞—Å—Ç–∏ –ö–∞—Ä–∞–≥–∞–Ω–¥–∞",
        "–ù–∞–π–¥–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ö–æ—Å—Ç–∞–Ω–∞–π",
        "10 –∫–æ–º–ø–∞–Ω–∏–π –≤ –£–ª—ã—Ç–∞—É—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏",  # –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    ]
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π fallback parsing —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏...")
    print("=" * 70)
    
    for i, test_query in enumerate(test_cases, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: '{test_query}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª–æ–∫–∞—Ü–∏–∏
        location = extract_location_simple(test_query)
        print(f"üìç –õ–æ–∫–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞: {location}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
        quantity_patterns = [
            (r'(\d+)\s*–∫–æ–º–ø–∞–Ω', r'\1'),
            (r'–Ω–∞–π–¥–∏\s*(\d+)', r'\1'),
            (r'–ø–æ–∫–∞–∂–∏\s*(\d+)', r'\1'),
            (r'–¥–∞–π\s*(\d+)', r'\1'),
        ]
        
        quantity = 10  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for pattern, replacement in quantity_patterns:
            match = re.search(pattern, test_query.lower())
            if match:
                try:
                    quantity = int(match.group(1))
                    break
                except ValueError:
                    continue
        
        print(f"üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ: {quantity}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π fallback parsing
        history = [{"role": "user", "content": test_query}]
        result = parse_intent_fallback_simple(test_query, history)
        
        print(f"üéØ Intent: {result['intent']}")
        print(f"üìç Location: {result['location']}")
        print(f"üî¢ Quantity: {result['quantity']}")
        print(f"üìÑ Page: {result['page_number']}")
        print(f"üè∑Ô∏è Activity keywords: {result['activity_keywords']}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å
        if result['intent'] == 'find_companies' and result['location']:
            print("‚úÖ –£–°–ü–ï–•: –ó–∞–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        else:
            print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–ø—Ä–æ—Å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        print("-" * 50)
    
    print("\n" + "=" * 70)

if __name__ == "__main__":
    test_full_fallback() 