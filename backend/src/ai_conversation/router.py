from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
import traceback
import uuid
import httpx
import os
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

from .models import ChatRequest, ChatResponse, CompanyCharityRequest, CompanyCharityResponse
from .service import ai_service
from ..core.database import get_db
from ..auth.models import User
from ..auth.dependencies import get_current_user
from ..chats import service as chat_service
from ..gemini_client import get_gemini_response

router = APIRouter(prefix="/ai", tags=["AI Conversation"])


@router.post("/chat-assistant", response_model=ChatResponse)
def handle_chat_with_assistant(
    request: ChatRequest, 
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user) 
):
    """
    Handle an AI conversation turn with database persistence.
    - Manages chat history and OpenAI thread context via the database.
    - Saves the new conversation turn to the database.
    """
    import time
    start_time = time.time()
    
    print(f"üí¨ [CHAT_ASSISTANT] New chat request from user {current_user.id}")
    print(f"üìù [CHAT_ASSISTANT] Input length: {len(request.user_input)} characters")
    
    if not request.user_input.strip():
        print(f"‚ùå [CHAT_ASSISTANT] Empty input rejected")
        raise HTTPException(status_code=400, detail="User input cannot be empty")
    
    db_chat_id: Optional[uuid.UUID] = None
    if request.chat_id:
        try:
            db_chat_id = uuid.UUID(request.chat_id)
            print(f"üîó [CHAT_ASSISTANT] Using existing chat ID: {db_chat_id}")
        except ValueError:
            print(f"‚ùå [CHAT_ASSISTANT] Invalid chat_id format: {request.chat_id}")
            raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
    else:
        print(f"üÜï [CHAT_ASSISTANT] Creating new chat session")

    print(f"üöÄ [CHAT_ASSISTANT] Starting conversation processing for user {current_user.id}")

    try:
        result = ai_service.handle_conversation_turn(
            user_input=request.user_input,
            history=request.history,
            db=db,
            conversation_id=str(db_chat_id) if db_chat_id else None
        )

        companies_count = len(result.get("companies", []))
        total_duration = time.time() - start_time
        
        print(f"‚úÖ [CHAT_ASSISTANT] Successfully processed chat in {total_duration:.2f}s")
        print(f"üè¢ [CHAT_ASSISTANT] Found {companies_count} companies in response")

        return ChatResponse(
            message=result["message"],
            companies=result["companies"],
            updated_history=result["updated_history"],
            intent=result["intent"],
            location=result["location_detected"],
            activity_keywords=result["activity_keywords_detected"],
            quantity=result["quantity_detected"],
            page_number=result["page_number"],
            companies_found=result["companies_found"],
            has_more_companies=result["has_more_companies"],
            reasoning=result["reasoning"]
        )
        
    except Exception as e:
        total_duration = time.time() - start_time
        print(f"‚ùå [CHAT_ASSISTANT] Error in chat endpoint after {total_duration:.2f}s: {str(e)}")
        traceback.print_exc()
        if isinstance(e, HTTPException):
            raise
        raise HTTPException(
            status_code=500, 
            detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.post("/charity-research", response_model=CompanyCharityResponse)
async def get_company_charity_info(
    request: CompanyCharityRequest,
    current_user = Depends(get_current_user)
):
    """
    Research company's charity involvement using Google Search and Gemini AI.
    Searches for information about company's charitable activities without storing in database.
    """
    import time
    start_time = time.time()
    
    print(f"üîç [CHARITY_RESEARCH] Starting research for company: '{request.company_name}'")
    print(f"üë§ [CHARITY_RESEARCH] Requested by user ID: {current_user.id}")
    
    try:
        # Get API keys from environment
        GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
        SEARCH_ENGINE_ID = os.getenv("GOOGLE_SEARCH_ENGINE_ID")
        
        print(f"üîë [CHARITY_RESEARCH] API keys status - Google: {'‚úì' if GOOGLE_API_KEY else '‚úó'}, Search Engine: {'‚úì' if SEARCH_ENGINE_ID else '‚úó'}")
        
        if not all([GOOGLE_API_KEY, SEARCH_ENGINE_ID]):
            print(f"‚ùå [CHARITY_RESEARCH] Missing Google API keys - cannot proceed")
            return CompanyCharityResponse(
                status="error",
                answer="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # Search for charity information about the company
        query = f"{request.company_name} –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å OR charity OR —Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ OR donation"
        search_url = (
            f"https://www.googleapis.com/customsearch/v1?q={query}"
            f"&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}"
        )
        
        print(f"üîç [CHARITY_RESEARCH] Google search query: '{query}'")
        print(f"üåê [CHARITY_RESEARCH] Sending request to Google Custom Search API...")

        async with httpx.AsyncClient() as client:
            try:
                google_start_time = time.time()
                g_res = await client.get(search_url)
                g_res.raise_for_status()
                search_data = g_res.json()
                items = search_data.get("items", [])[:5]
                google_duration = time.time() - google_start_time
                print(f"‚úÖ [CHARITY_RESEARCH] Google Search completed in {google_duration:.2f}s - found {len(items)} results")
            except httpx.RequestError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Google Search API error: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."
                )
            except httpx.HTTPStatusError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Google Search HTTP error {e.response.status_code}: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        # Extract links and snippets
        links = [item.get("link", "") for item in items]
        snippets = [item.get("snippet", "") for item in items]
        
        print(f"üìã [CHARITY_RESEARCH] Extracted {len(links)} links and {len(snippets)} snippets")
        if links:
            print(f"üîó [CHARITY_RESEARCH] Top search results domains: {', '.join([link.split('/')[2] if '/' in link else link for link in links[:3]])}")

        # Check if we have enough data to proceed
        if not snippets or not any(snippets):
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] No search results found for company '{request.company_name}'")
            return CompanyCharityResponse(
                status="warning",
                answer=f"–î–∞–Ω–Ω—ã—Ö –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
            )

        # Create summary text for Gemini
        text_summary = "\n".join(snippets)
        summary_length = len(text_summary)
        print(f"üìù [CHARITY_RESEARCH] Created summary text with {summary_length} characters for Gemini analysis")
        
        # Create prompt for Gemini
        prompt = f"""
        –ò—Å—Ö–æ–¥—è –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—á–∞—Å—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}' –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:

        {text_summary}

        –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏:
        {chr(10).join(links)}

        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
        1. –£—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–º–ø–∞–Ω–∏—è –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–∞/–Ω–µ—Ç/–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
        2. –ö–∞–∫–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏–ª–∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
        3. –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ/–ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏/—Ä–∞–∑–æ–≤–æ)
        4. –°—Ñ–µ—Ä—ã –ø–æ–º–æ—â–∏ (–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, —Å–ø–æ—Ä—Ç, –∫—É–ª—å—Ç—É—Ä–∞ –∏ —Ç.–¥.)

        –í–ê–ñ–ù–û: –ï—Å–ª–∏ –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞ –Ω–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π –æ–¥–∏–Ω –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö fallback –æ—Ç–≤–µ—Ç–æ–≤:

        - "–î–∞–Ω–Ω—ã—Ö –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
        - "–ö–æ–º–ø–∞–Ω–∏—è '{request.company_name}' –º–æ–≥–ª–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        - "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."

        –í –∫–æ–Ω—Ü–µ –æ—Ç–≤–µ—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤—å –±–ª–æ–∫ "–ò—Å—Ç–æ—á–Ω–∏–∫–∏:" —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Å—ã–ª–æ–∫, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å. –§–æ—Ä–º–∞—Ç:

        –ò—Å—Ç–æ—á–Ω–∏–∫–∏:
        1. [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞] - [—Å—Å—ã–ª–∫–∞]
        2. [–Ω–∞–∑–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞] - [—Å—Å—ã–ª–∫–∞]

        –û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ, —á–µ—Ç–∫–æ –∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π fallback –æ—Ç–≤–µ—Ç.
        """

        # Send request to Gemini API using the existing client
        print(f"ü§ñ [CHARITY_RESEARCH] Sending analysis request to Gemini API...")
        print(f"üìä [CHARITY_RESEARCH] Prompt length: {len(prompt)} characters")

        try:
            gemini_start_time = time.time()
            answer = get_gemini_response(prompt)
            gemini_duration = time.time() - gemini_start_time
            print(f"‚úÖ [CHARITY_RESEARCH] Gemini API response received in {gemini_duration:.2f}s")
            
            answer_length = len(answer)
            print(f"üìù [CHARITY_RESEARCH] Gemini analysis extracted - length: {answer_length} characters")
            
            # Validate that we got a meaningful response
            if not answer or len(answer.strip()) < 10:
                print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Gemini returned empty or too short response")
                return CompanyCharityResponse(
                    status="warning",
                    answer=f"–ö–æ–º–ø–∞–Ω–∏—è '{request.company_name}' –º–æ–≥–ª–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )
            
            # Add sources to the answer if they weren't included by Gemini
            final_answer = answer.strip()
            if links and "–ò—Å—Ç–æ—á–Ω–∏–∫–∏:" not in final_answer:
                print(f"üîó [CHARITY_RESEARCH] Adding {len(links)} source links to the response")
                sources_block = "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
                for i, link in enumerate(links, 1):
                    # Extract domain name for better readability
                    try:
                        domain = link.split('/')[2] if '/' in link else link
                        sources_block += f"{i}. {domain} - {link}\n"
                    except:
                        sources_block += f"{i}. {link}\n"
                final_answer += sources_block
            
        except Exception as e:
            print(f"‚ùå [CHARITY_RESEARCH] Gemini API error: {str(e)}")
            return CompanyCharityResponse(
                status="error",
                answer="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            )

        total_duration = time.time() - start_time
        print(f"‚úÖ [CHARITY_RESEARCH] Successfully completed analysis for '{request.company_name}' in {total_duration:.2f}s")
        print(f"üìä [CHARITY_RESEARCH] Final response size: {len(final_answer)} characters")
        
        return CompanyCharityResponse(
            status="success",
            answer=final_answer
        )

    except Exception as e:
        total_duration = time.time() - start_time
        print(f"‚ùå [CHARITY_RESEARCH] Unexpected error analyzing charity info for '{request.company_name}' after {total_duration:.2f}s: {str(e)}")
        traceback.print_exc()
        return CompanyCharityResponse(
            status="error",
            answer="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        ) 