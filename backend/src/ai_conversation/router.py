from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
import traceback
import uuid
import os
import httpx
import json
import re
import asyncio
from typing import List, Dict, Any

from .models import ChatRequest, ChatResponse, CompanyCharityRequest, CompanyCharityResponse
# !!! –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ù–ê–® –ì–õ–ê–í–ù–´–ô –°–ï–†–í–ò–° !!!
from .service import ai_service
from ..core.database import get_db
from ..auth.models import User
from ..auth.dependencies import get_current_user
from ..chats import service as chat_service  # –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
from ..chats.models import Chat  # –ú–æ–¥–µ–ª—å —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏

router = APIRouter(prefix="/ai", tags=["AI Conversation"])

# ============================================================================== 
# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø API –ö–õ–Æ–ß–ï–ô –î–õ–Ø GOOGLE SEARCH ===
# ==============================================================================
GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_SEARCH_ENGINE_ID = os.getenv("GOOGLE_SEARCH_ENGINE_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GOOGLE_API_KEY:
    print("‚ö†Ô∏è [CHARITY_RESEARCH] Warning: GOOGLE_API_KEY not found in environment variables")
if not GOOGLE_SEARCH_ENGINE_ID:
    print("‚ö†Ô∏è [CHARITY_RESEARCH] Warning: GOOGLE_SEARCH_ENGINE_ID not found in environment variables")
if not GEMINI_API_KEY:
    print("‚ö†Ô∏è [CHARITY_RESEARCH] Warning: GEMINI_API_KEY not found in environment variables")


# ============================================================================== 
# === –ù–û–í–´–ô, –ü–†–ê–í–ò–õ–¨–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ü–û–ò–°–ö–ê –ö–û–ú–ü–ê–ù–ò–ô –ß–ï–†–ï–ó –ë–î ===
# ==============================================================================
@router.post("/chat", response_model=ChatResponse)
async def handle_chat_with_database_search(
    request: ChatRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Handles a conversation turn by parsing user intent, searching the database for companies,
    and generating a response. This is the main endpoint for company search.
    """
    print(f"\U0001F4AC [CHAT_DB] New request from user {current_user.id}: '{request.user_input[:100]}...'")

    if not request.user_input.strip():
        raise HTTPException(status_code=400, detail="User input cannot be empty")

    try:
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        db_chat_id = None
        if request.chat_id:
            try:
                db_chat_id = uuid.UUID(request.chat_id)
                print(f"üîÑ [CHAT_DB] Using existing chat session: {db_chat_id}")
            except ValueError:
                raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
        else:
            # –ï—Å–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –ë–î
            chat_name = request.user_input[:100]
            new_chat = chat_service.create_chat(
                db=db,
                user_id=current_user.id,
                name=chat_name
            )
            db_chat_id = new_chat.id
            print(f"üÜï [CHAT_DB] Created new chat session '{chat_name}' with ID: {db_chat_id}")

        # 2. –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ ai_service.py
        # –°–µ—Ä–≤–∏—Å —Ç–µ–ø–µ—Ä—å —Å–∞–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        response_data = await ai_service.handle_conversation_turn(
            user_input=request.user_input,
            history=[],  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –ë–î
            db=db,
            conversation_id=str(db_chat_id)
        )
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å–µ, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç
        final_response = ChatResponse(
            message=response_data.get('message'),
            companies=response_data.get('companies', []),
            updated_history=response_data.get('updated_history', []),
            assistant_id=None, # –£ –≤–∞—Å –Ω–µ—Ç OpenAI Assistant ID –≤ —ç—Ç–æ–π –ª–æ–≥–∏–∫–µ
            chat_id=str(db_chat_id),
            openai_thread_id=None
        )

        print(f"‚úÖ [CHAT_DB] Successfully processed request. Found {len(final_response.companies)} companies.")
        return final_response

    except Exception as e:
        print(f"‚ùå [CHAT_DB] Critical error in chat endpoint: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")


@router.get("/chat/{chat_id}/history")
async def get_chat_history_for_ai(
    chat_id: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–ª—è AI –¥–∏–∞–ª–æ–≥–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ updated_history.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID
        chat_uuid = uuid.UUID(chat_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑—É—è AI service
        history = ai_service._load_chat_history_from_db(db, chat_uuid)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        chat = db.query(Chat).filter(
            Chat.id == chat_uuid,
            Chat.user_id == current_user.id
        ).first()
        
        if not chat:
            raise HTTPException(status_code=404, detail="Chat not found or access denied")
        
        return {
            "chat_id": str(chat_uuid),
            "title": chat.title,
            "history": history,
            "total_messages": len(history)
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
    except Exception as e:
        print(f"‚ùå [AI_HISTORY] Error getting chat history: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="Failed to retrieve chat history.")


# ============================================================================== 
# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø GOOGLE SEARCH ===
# ==============================================================================
async def search_google(query: str, num_results: int = 5) -> List[Dict[str, Any]]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google Custom Search API
    
    Args:
        query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        num_results: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10)
    
    Returns:
        –°–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    """
    if not GOOGLE_API_KEY or not GOOGLE_SEARCH_ENGINE_ID:
        print("‚ùå [GOOGLE_SEARCH] Google API credentials not configured")
        return []
    
    try:
        url = "https://www.googleapis.com/customsearch/v1"
        params = {
            "key": GOOGLE_API_KEY,
            "cx": GOOGLE_SEARCH_ENGINE_ID,
            "q": query,
            "num": min(num_results, 10),  # Google API –º–∞–∫—Å–∏–º—É–º 10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
            "lr": "lang_ru",  # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
            "gl": "kz"  # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
        }
        
        async with httpx.AsyncClient(timeout=10.0) as client:
            response = await client.get(url, params=params)
            response.raise_for_status()
            
            data = response.json()
            items = data.get("items", [])
            
            results = []
            for item in items:
                results.append({
                    "title": item.get("title", ""),
                    "link": item.get("link", ""),
                    "snippet": item.get("snippet", ""),
                    "displayLink": item.get("displayLink", "")
                })
            
            print(f"‚úÖ [GOOGLE_SEARCH] Found {len(results)} results for query: '{query}'")
            return results
            
    except httpx.HTTPError as e:
        print(f"‚ùå [GOOGLE_SEARCH] HTTP error: {e}")
        return []
    except Exception as e:
        print(f"‚ùå [GOOGLE_SEARCH] Unexpected error: {e}")
        return []


def extract_charity_info_from_results(results: List[Dict[str, Any]], company_name: str) -> Dict[str, Any]:
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    
    Args:
        results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ Google
        company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    
    Returns:
        –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    """
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    charity_keywords = [
        "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", "charity", "—Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ", "sponsorship", 
        "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "csr", "–ø–æ–º–æ—â—å", "–ø–æ–¥–¥–µ—Ä–∂–∫–∞",
        "—Ñ–æ–Ω–¥", "foundation", "–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "education", "–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ",
        "healthcare", "–∫—É–ª—å—Ç—É—Ä–∞", "culture", "—Å–ø–æ—Ä—Ç", "sport", "—ç–∫–æ–ª–æ–≥–∏—è"
    ]
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    relevant_snippets = []
    sources = []
    charity_areas = set()
    
    for result in results:
        title = result.get("title", "").lower()
        snippet = result.get("snippet", "").lower()
        link = result.get("link", "")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        is_relevant = False
        for keyword in charity_keywords:
            if keyword in title or keyword in snippet:
                is_relevant = True
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±–ª–∞—Å—Ç—å –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                if keyword in ["–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "education"]:
                    charity_areas.add("–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
                elif keyword in ["–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ", "healthcare"]:
                    charity_areas.add("–ó–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
                elif keyword in ["–∫—É–ª—å—Ç—É—Ä–∞", "culture"]:
                    charity_areas.add("–ö—É–ª—å—Ç—É—Ä–∞")
                elif keyword in ["—Å–ø–æ—Ä—Ç", "sport"]:
                    charity_areas.add("–°–ø–æ—Ä—Ç")
                elif keyword in ["—ç–∫–æ–ª–æ–≥–∏—è"]:
                    charity_areas.add("–≠–∫–æ–ª–æ–≥–∏—è")
                else:
                    charity_areas.add("–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â—å")
                
                break
        
        if is_relevant:
            relevant_snippets.append(result.get("snippet", ""))
            sources.append(link)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏
    confidence_score = min(len(relevant_snippets) / 5.0, 1.0)  # –ú–∞–∫—Å–∏–º—É–º 1.0 –ø—Ä–∏ 5+ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    
    return {
        "relevant_snippets": relevant_snippets,
        "sources": sources[:5],  # –ú–∞–∫—Å–∏–º—É–º 5 –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        "charity_areas": list(charity_areas),
        "confidence_score": confidence_score,
        "total_results": len(results),
        "relevant_results": len(relevant_snippets)
    }


# –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê–ù–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GEMINI (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
"""
async def analyze_with_gemini(company_name: str, search_results: Dict[str, Any], additional_context: str = None) -> str:
    \"\"\"
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å –ø–æ–º–æ—â—å—é Gemini API
    
    Args:
        company_name: –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
        search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        additional_context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        –ê–Ω–∞–ª–∏–∑ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏
    \"\"\"
    if not GEMINI_API_KEY:
        return "Gemini API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Gemini
        snippets_text = "\\n".join(search_results.get("relevant_snippets", []))
        charity_areas = ", ".join(search_results.get("charity_areas", []))
        
        prompt = f\"\"\"
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ "{company_name}" –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        
        –ù–∞–π–¥–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
        {snippets_text}
        
        –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {charity_areas}
        
        {"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: " + additional_context if additional_context else ""}
        
        –ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑:
        1. –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã
        3. –û–±—ä–µ–º –∏ –º–∞—Å—à—Ç–∞–± –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        4. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
        
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.
        \"\"\"
        
        gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={GEMINI_API_KEY}"
        payload = {
            "contents": [{"parts": [{"text": prompt}]}]
        }
        
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.post(gemini_url, json=payload)
            response.raise_for_status()
            
            data = response.json()
            analysis = data["candidates"][0]["content"]["parts"][0]["text"]
            
            print(f"‚úÖ [GEMINI_ANALYSIS] Successfully analyzed charity info for {company_name}")
            return analysis
            
    except Exception as e:
        print(f"‚ùå [GEMINI_ANALYSIS] Error analyzing with Gemini: {e}")
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ Gemini: {str(e)}"
"""


# ============================================================================== 
# === –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ë–õ–ê–ì–û–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===
# ==============================================================================
@router.post("/charity-research", response_model=CompanyCharityResponse)
async def get_company_charity_info(
    request: CompanyCharityRequest,
    current_user: User = Depends(get_current_user)
):
    """
    –ò—Å—Å–ª–µ–¥—É–µ—Ç –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–º–ø–∞–Ω–∏–∏ —Å –ø–æ–º–æ—â—å—é Google Search
    –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑.
    """
    print(f"\U0001F50D [CHARITY_RESEARCH] Starting research for company: '{request.company_name}'")
    
    try:
        # 1. –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        base_queries = [
            f"{request.company_name} –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
            f"{request.company_name} —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            f"{request.company_name} —Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ"
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        if request.additional_context:
            base_queries.append(f"{request.company_name} {request.additional_context}")
        
        # 2. –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –∑–∞–ø—Ä–æ—Å–∞–º
        all_results = []
        search_queries_used = []
        
        for query in base_queries:
            print(f"üîç [CHARITY_RESEARCH] Searching: '{query}'")
            search_queries_used.append(query)
            results = await search_google(query, num_results=3)
            all_results.extend(results)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            await asyncio.sleep(0.5)
        
        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        charity_info = extract_charity_info_from_results(all_results, request.company_name)
        
        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
        if charity_info["relevant_results"] == 0:
            analysis = f"""
            –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—É–±–ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ "{request.company_name}".
            
            –≠—Ç–æ –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å:
            ‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –≤–µ–¥–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            ‚Ä¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
            ‚Ä¢ –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–¥–µ—Ç—Å—è, –Ω–æ –ø–æ–¥ –¥—Ä—É–≥–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏–ª–∏ —á–µ—Ä–µ–∑ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            
            –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
            ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º –∫–æ–º–ø–∞–Ω–∏–∏
            ‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
            ‚Ä¢ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –≤–∑–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω–æ–≥–æ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
            """
            status = "warning"
        else:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            areas_text = ", ".join(charity_info["charity_areas"]) if charity_info["charity_areas"] else "—Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏"
            
            analysis = f"""
            –ö–æ–º–ø–∞–Ω–∏—è "{request.company_name}" –ø—Ä–æ—è–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å—Ñ–µ—Ä–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–π —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.
            
            üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:
            {areas_text}
            
            üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:
            ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {charity_info["relevant_results"]}
            ‚Ä¢ –û–±—â–∏–π –æ–±—ä–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {charity_info["total_results"]} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
            üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è:
            ‚Ä¢ –ò–∑—É—á–∏—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å"
            ‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –æ—Ç–¥–µ–ª –ø–æ —Å–≤—è–∑—è–º —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é –∏–ª–∏ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è–º
            ‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–µ–µ –≤–∑–∞–∏–º–Ω—É—é –≤—ã–≥–æ–¥—É —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞
            ‚Ä¢ –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
            """
            status = "success"
        
        # 5. –ë–£–î–£–©–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° GEMINI (–ø–æ–∫–∞ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ)
        # –ö–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ, —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–∏ —Å—Ç—Ä–æ–∫–∏:
        # if GEMINI_API_KEY and charity_info["relevant_results"] > 0:
        #     try:
        #         analysis = await analyze_with_gemini(
        #             request.company_name, 
        #             charity_info, 
        #             request.additional_context
        #         )
        #     except Exception as e:
        #         print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Gemini analysis failed, using fallback: {e}")
        
        # 6. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = CompanyCharityResponse(
            status=status,
            answer=analysis.strip(),
            search_query=" | ".join(search_queries_used),
            sources=charity_info["sources"],
            confidence_score=charity_info["confidence_score"],
            charity_areas=charity_info["charity_areas"] if charity_info["charity_areas"] else None,
            recommendations="""
            –î–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∑–∞ —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
            1. –ò–∑—É—á–∏—Ç–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏
            2. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
            3. –£–∫–∞–∂–∏—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –ø–æ–ª—å–∑—É –¥–ª—è –±—Ä–µ–Ω–¥–∞ –∫–æ–º–ø–∞–Ω–∏–∏
            4. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞
            5. –û–±–µ—Å–ø–µ—á—å—Ç–µ –ø—Ä–æ–∑—Ä–∞—á–Ω—É—é –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
            """ if charity_info["relevant_results"] > 0 else None
        )
        
        print(f"‚úÖ [CHARITY_RESEARCH] Research completed for '{request.company_name}'. Status: {status}")
        return response
        
    except Exception as e:
        print(f"‚ùå [CHARITY_RESEARCH] Critical error during research: {e}")
        traceback.print_exc()
        
        return CompanyCharityResponse(
            status="error",
            answer=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            search_query=request.company_name,
            sources=[],
            confidence_score=0.0,
            charity_areas=None,
            recommendations=None
        ) 