import os
import time
import psycopg2
import requests
from dotenv import load_dotenv

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –£–∫–∞–∂–∏—Ç–µ –∏–º—è –≤–∞—à–µ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏ —Å –ë–ò–ù
TABLE_NAME = "companies"  # <--- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ò–ú–Ø –í–ê–®–ï–ô –¢–ê–ë–õ–ò–¶–´
BIN_COLUMN = "BIN"      # <--- –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –ò–ú–Ø –ö–û–õ–û–ù–ö–ò –° –ë–ò–ù

# –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
API_BASE_URL = "https://apiba.prgapp.kz/CompanyFullInfo"

# --- –ö–û–ù–ï–¶ –ù–ê–°–¢–†–û–ï–ö ---


def get_db_connection():
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö PostgreSQL."""
    try:
        conn = psycopg2.connect(
            host=os.getenv("DB_HOST"),
            port=os.getenv("DB_PORT"),
            dbname=os.getenv("DB_NAME"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD"),
        )
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return conn
    except psycopg2.OperationalError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None

def fetch_all_bins(conn):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –ë–ò–ù—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã."""
    bins = []
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 'with' –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –∫—É—Ä—Å–æ—Ä–∞
    with conn.cursor() as cur:
        try:
            query = f"SELECT {BIN_COLUMN} FROM {TABLE_NAME};"
            cur.execute(query)
            # fetchall() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä [('123',), ('456',)]
            # –ú—ã –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ –ø—Ä–æ—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ['123', '456']
            bins = [item[0] for item in cur.fetchall()]
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(bins)} –ë–ò–ù–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
        except (psycopg2.Error, psycopg2.DatabaseError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ë–ò–ù–æ–≤: {e}")
    return bins

def fetch_company_data(bin_code):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –ë–ò–ù —Å API."""
    params = {"id": bin_code, "lang": "ru"}
    try:
        response = requests.get(API_BASE_URL, params=params, timeout=15)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ HTTP (4xx, 5xx)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as e:
        # –ß–∞—â–µ –≤—Å–µ–≥–æ 404 Not Found, –µ—Å–ª–∏ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ—Ç
        if e.response.status_code == 404:
            print(f"‚ÑπÔ∏è  –ö–æ–º–ø–∞–Ω–∏—è —Å –ë–ò–ù {bin_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–∞–π—Ç–µ. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        else:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ HTTP –¥–ª—è –ë–ò–ù {bin_code}: {e}")
        return None
    except requests.exceptions.RequestException as e:
        print(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ë–ò–ù {bin_code}: {e}")
        return None

def update_taxes_in_db(conn, bin_code, taxes_to_update):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ –Ω–∞–ª–æ–≥–∞–º –¥–ª—è –æ–¥–Ω–æ–≥–æ –ë–ò–ù–∞ –≤ –ë–î."""
    if not taxes_to_update:
        print(f"‚ÑπÔ∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ë–ò–ù {bin_code}.")
        return

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å—Ç—Ä–æ–∏–º SET —á–∞—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–∑–∞—â–∏—Ç–∞ –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π)
    # –ü—Ä–∏–º–µ—Ä: "tax_payment_2021" = %s, "tax_payment_2022" = %s
    set_clause = ", ".join([f"{col} = %s" for col in taxes_to_update.keys()])
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    query = f"UPDATE {TABLE_NAME} SET {set_clause} WHERE {BIN_COLUMN} = %s;"
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –∫–æ–ª–æ–Ω–∫–∏ –≤ set_clause,
    # –∞ –≤ –∫–æ–Ω—Ü–µ –¥–æ–±–∞–≤–ª—è–µ–º –ë–ò–ù –¥–ª—è WHERE
    values = list(taxes_to_update.values()) + [bin_code]

    with conn.cursor() as cur:
        try:
            cur.execute(query, tuple(values))
            conn.commit() # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –ë–î
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞–ª–æ–≥–∏ –¥–ª—è –ë–ò–ù {bin_code}.")
        except (psycopg2.Error, psycopg2.DatabaseError) as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ë–ò–ù {bin_code}: {e}")
            conn.rollback() # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞."""
    conn = get_db_connection()
    if not conn:
        return

    bins_to_process = fetch_all_bins(conn)
    if not bins_to_process:
        conn.close()
        return

    for bin_code in bins_to_process:
        print(f"\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ë–ò–ù: {bin_code} ---")
        
        company_data = fetch_company_data(bin_code)
        
        if not (company_data and company_data.get("success") and "data" in company_data):
            print(f"‚ÑπÔ∏è  –ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API –¥–ª—è –ë–ò–ù {bin_code}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue
            
        tax_graph_data = company_data["data"].get("taxGraph")
        
        if not tax_graph_data or not isinstance(tax_graph_data, list):
            print(f"‚ÑπÔ∏è  –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á 'taxGraph' –¥–ª—è –ë–ò–ù {bin_code}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            continue

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —É–¥–æ–±–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å {–≥–æ–¥: —Å—É–º–º–∞}
        # [{'year': 2021, 'amount': 100}] -> {2021: 100}
        tax_map = {item['year']: item['amount'] for item in tax_graph_data if 'year' in item}

        taxes_to_update = {}
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≥–æ–¥–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç
        for year in range(2021, 2026):
            db_column = f"tax_payment_{year}"
            # .get(year) –≤–µ—Ä–Ω–µ—Ç None, –µ—Å–ª–∏ —Ç–∞–∫–æ–π –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ tax_map
            amount = tax_map.get(year)
            
            if amount is not None:
                taxes_to_update[db_column] = amount

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î, –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –æ–±–Ω–æ–≤–ª—è—Ç—å
        update_taxes_in_db(conn, bin_code, taxes_to_update)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        time.sleep(0.5) # 0.5 —Å–µ–∫—É–Ω–¥—ã

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    conn.close()
    print("\nüéâ –í—Å–µ –ë–ò–ù—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã. –†–∞–±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
    main()