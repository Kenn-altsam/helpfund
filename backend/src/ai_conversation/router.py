from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
import traceback
import uuid
import os
import httpx
import json
import re
import asyncio
from typing import List, Dict, Any
from dotenv import load_dotenv

from .models import ChatRequest, ChatResponse, CompanyCharityRequest, CompanyCharityResponse, GoogleSearchResult
# !!! –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ù–ê–® –ì–õ–ê–í–ù–´–ô –°–ï–†–í–ò–° !!!
from .service import ai_service
from ..core.database import get_db
from ..auth.models import User
from ..auth.dependencies import get_current_user
from ..chats import service as chat_service  # –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
from ..chats.models import Chat  # –ú–æ–¥–µ–ª—å —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏

router = APIRouter(prefix="/ai", tags=["AI Conversation"])

# ============================================================================== 
# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø API –ö–õ–Æ–ß–ï–ô –î–õ–Ø GOOGLE SEARCH ===
# ==============================================================================
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞)
import pathlib
env_path = pathlib.Path(__file__).parent.parent.parent.parent / '.env'
load_dotenv(dotenv_path=env_path)

GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
GOOGLE_SEARCH_ENGINE_ID = os.getenv("GOOGLE_SEARCH_ENGINE_ID")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GOOGLE_API_KEY:
    raise RuntimeError("GOOGLE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
if not GOOGLE_SEARCH_ENGINE_ID:
    raise RuntimeError("GOOGLE_SEARCH_ENGINE_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")


# ============================================================================== 
# === –ù–û–í–´–ô, –ü–†–ê–í–ò–õ–¨–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ü–û–ò–°–ö–ê –ö–û–ú–ü–ê–ù–ò–ô –ß–ï–†–ï–ó –ë–î ===
# ==============================================================================
@router.post("/chat", response_model=ChatResponse)
async def handle_chat_with_database_search(
    request: ChatRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Handles a conversation turn by parsing user intent, searching the database for companies,
    and generating a response. This is the main endpoint for company search.
    """
    print(f"\U0001F4AC [CHAT_DB] New request from user {current_user.id}: '{request.user_input[:100]}...'")

    if not request.user_input.strip():
        raise HTTPException(status_code=400, detail="User input cannot be empty")

    try:
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        db_chat_id = None
        if request.chat_id:
            try:
                db_chat_id = uuid.UUID(request.chat_id)
                print(f"üîÑ [CHAT_DB] Using existing chat session: {db_chat_id}")
            except ValueError:
                raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
        else:
            # –ï—Å–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –ë–î
            chat_name = request.user_input[:100]
            new_chat = chat_service.create_chat(
                db=db,
                user_id=current_user.id,
                name=chat_name
            )
            db_chat_id = new_chat.id
            print(f"üÜï [CHAT_DB] Created new chat session '{chat_name}' with ID: {db_chat_id}")

        # 2. –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ ai_service.py
        # –°–µ—Ä–≤–∏—Å —Ç–µ–ø–µ—Ä—å —Å–∞–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        response_data = await ai_service.handle_conversation_turn(
            user_input=request.user_input,
            history=[],  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –ë–î
            db=db,
            conversation_id=str(db_chat_id)
        )
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å–µ, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç
        final_response = ChatResponse(
            message=response_data.get('message'),
            companies=response_data.get('companies', []),
            updated_history=response_data.get('updated_history', []),
            assistant_id=None, # –£ –≤–∞—Å –Ω–µ—Ç OpenAI Assistant ID –≤ —ç—Ç–æ–π –ª–æ–≥–∏–∫–µ
            chat_id=str(db_chat_id),
            openai_thread_id=None
        )

        print(f"‚úÖ [CHAT_DB] Successfully processed request. Found {len(final_response.companies)} companies.")
        return final_response

    except Exception as e:
        print(f"‚ùå [CHAT_DB] Critical error in chat endpoint: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")


@router.get("/chat/{chat_id}/history")
async def get_chat_history_for_ai(
    chat_id: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–ª—è AI –¥–∏–∞–ª–æ–≥–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ updated_history.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID
        chat_uuid = uuid.UUID(chat_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑—É—è AI service
        history = ai_service._load_chat_history_from_db(db, chat_uuid)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        chat = db.query(Chat).filter(
            Chat.id == chat_uuid,
            Chat.user_id == current_user.id
        ).first()
        
        if not chat:
            raise HTTPException(status_code=404, detail="Chat not found or access denied")
        
        return {
            "chat_id": str(chat_uuid),
            "title": chat.title,
            "history": history,
            "total_messages": len(history)
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
    except Exception as e:
        print(f"‚ùå [AI_HISTORY] Error getting chat history: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="Failed to retrieve chat history.")





# ============================================================================== 
# === –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ë–õ–ê–ì–û–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î) ===
# ==============================================================================
@router.post("/charity-research", response_model=CompanyCharityResponse)
async def get_company_charity_info(
    request: CompanyCharityRequest,
    current_user: User = Depends(get_current_user)  # –ó–∞—â–∏—â–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google –ø–æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Å–Ω–∏–ø–ø–µ—Ç—ã.
    """
    company_name = request.company_name

    print(f"\U0001F50D [CHARITY_RESEARCH] Starting research for company: '{company_name}' by user {current_user.id}")

    if not company_name.strip():
        raise HTTPException(status_code=400, detail="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    search_queries = [
        f"{company_name} –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
        f"{company_name} —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
        f"{company_name} –ö–°–û",  # –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å
        f"{company_name} —Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ",
        f"{company_name} charitable activities",  # –ê–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        f"{company_name} CSR activities"  # –ï—â–µ –æ–¥–∏–Ω –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    ]

    all_search_results: List[GoogleSearchResult] = []
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ httpx.AsyncClient –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    async with httpx.AsyncClient() as client:
        for query in search_queries:
            search_url = (
                f"https://www.googleapis.com/customsearch/v1?"
                f"key={GOOGLE_API_KEY}&"
                f"cx={GOOGLE_SEARCH_ENGINE_ID}&"
                f"q={query}"
            )

            try:
                response = await client.get(search_url)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º await –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                response.raise_for_status()  # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫ (4xx –∏–ª–∏ 5xx)
                search_data = response.json()

                if 'items' in search_data:
                    for item in search_data['items']:
                        all_search_results.append(GoogleSearchResult(
                            title=item.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                            link=item.get('link', '#'),
                            snippet=item.get('snippet', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                        ))
                
            except httpx.RequestError as e:
                print(f"‚ùå [CHARITY_RESEARCH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Google Search API –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}': {e}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã, –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞—è HTTPException —Å—Ä–∞–∑—É
            except Exception as e:
                print(f"‚ùå [CHARITY_RESEARCH] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ '{query}': {e}")
                traceback.print_exc()

    summary_text = None
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Gemini –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    # if all_search_results and GEMINI_API_KEY:
    #     try:
    #         if 'gemini_model' in globals(): # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ gemini_model –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    #             prompt_parts = [
    #                 "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –∫—Ä–∞—Ç–∫–æ –∏–∑–ª–æ–∂–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏, —É–∫–∞–∑—ã–≤–∞—è –∫–ª—é—á–µ–≤—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –∏–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:\n\n"
    #             ]
    #             # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    #             for i, result in enumerate(all_search_results[:5]): # –ú–æ–∂–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤—ã–º–∏ 5-10 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    #                 prompt_parts.append(f"–†–µ–∑—É–ª—å—Ç–∞—Ç {i+1}:\n")
    #                 prompt_parts.append(f"–ó–∞–≥–æ–ª–æ–≤–æ–∫: {result.title}\n")
    #                 prompt_parts.append(f"–°–Ω–∏–ø–ø–µ—Ç: {result.snippet}\n\n")
                
    #             # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–∏–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞, –Ω–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å run_in_threadpool
    #             # –∏–ª–∏ async-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π Gemini API
    #             # gemini_response = gemini_model.generate_content("".join(prompt_parts)) 
    #             # summary_text = gemini_response.text
    #             summary_text = "–ü—Ä–∏–º–µ—Ä —Å–≤–æ–¥–∫–∏ –æ—Ç Gemini, –µ—Å–ª–∏ –±—ã –æ–Ω –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω." # –ó–∞–≥–ª—É—à–∫–∞
    #         else:
    #             summary_text = "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Gemini –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω."
    #     except Exception as e:
    #         print(f"‚ùå [CHARITY_RESEARCH] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–≤–æ–¥–∫–∏ —Å Gemini: {e}")
    #         traceback.print_exc()
    #         summary_text = "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
    # elif not all_search_results:
    #     summary_text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º –∑–∞–ø—Ä–æ—Å–∞–º."

    final_summary_for_response = summary_text if summary_text is not None else (
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞." if not all_search_results else "–°–≤–æ–¥–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞."
    )

    if not all_search_results:
        print(f"INFO: No charity information found for '{company_name}'.")
        return CompanyCharityResponse(
            status="success",
            company_name=company_name,
            charity_info=[],
            summary=final_summary_for_response
        )

    print(f"‚úÖ [CHARITY_RESEARCH] Successfully completed research for company: '{company_name}'. Found {len(all_search_results)} results.")
    return CompanyCharityResponse(
        status="success",
        company_name=company_name,
        charity_info=all_search_results,
        summary=final_summary_for_response
    ) 