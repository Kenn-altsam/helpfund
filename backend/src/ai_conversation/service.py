"""
OpenAI service for AI conversation functionality

Handles communication with Azure OpenAI API for charity sponsorship matching.
"""

import httpx
import json
import re
import traceback
import os
from typing import Optional, Dict, Any, List

from fastapi import HTTPException
from sqlalchemy.orm import Session
from dotenv import load_dotenv

from ..core.config import get_settings
from ..companies.service import CompanyService
from .location_service import get_canonical_location_from_text

load_dotenv()

# <<< –ù–û–í–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø GEMINI >>>
GEMINI_INTENT_PROMPT = """
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–≤–ª–µ—á—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –¢–û–õ–¨–ö–û –æ–¥–Ω–∏–º –≤–∞–ª–∏–¥–Ω—ã–º JSON-–æ–±—ä–µ–∫—Ç–æ–º –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –¥—Ä—É–≥–∏—Ö —Å–ª–æ–≤ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.

–ö–û–ù–¢–ï–ö–°–¢ –ò–ó –ò–°–¢–û–†–ò–ò:
1.  **–ù–∞–π–¥–∏ –±–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:** –í –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≥–¥–µ –±—ã–ª–∏ —É–∫–∞–∑–∞–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ (–≥–æ—Ä–æ–¥, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞).
2.  **–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:** –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å ‚Äî —ç—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ ("–¥–∞–π –µ—â–µ", "—Å–ª–µ–¥—É—é—â–∏–µ"), —Ç—ã –û–ë–Ø–ó–ê–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥ –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –±–∞–∑–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
3.  **–°—Ç—Ä–∞–Ω–∏—Ü—ã (Pagination):** –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞-–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è ("–¥–∞–π –µ—â–µ", "next") —É–≤–µ–ª–∏—á–∏–≤–∞–π `page_number` –Ω–∞ 1. –î–ª—è –ø–µ—Ä–≤–æ–≥–æ –∏–ª–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞ `page_number` –≤—Å–µ–≥–¥–∞ 1.

–ü–†–ê–í–ò–õ–ê:
- **–õ–æ–∫–∞—Ü–∏—è:** –ì–æ—Ä–æ–¥ –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Almaty" -> "–ê–ª–º–∞—Ç—ã"). –ï—Å–ª–∏ –≥–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –≤ —Ç–µ–∫—É—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –Ω–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏, `location` –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å `null`.
- **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:** –ò–∑–≤–ª–µ–∫–∏ —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ "–Ω–∞–π–¥–∏ 30 –∫–æ–º–ø–∞–Ω–∏–π" –∏–∑–≤–ª–µ–∫–∏ 30). –ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–π 10.
- **–û—Ç–≤–µ—Ç:** –¢–æ–ª—å–∫–æ JSON. –ù–∏–∫–∞–∫–∏—Ö "–í–æ—Ç –≤–∞—à JSON:" –∏–ª–∏ ```json ... ```.

–°—Ç—Ä—É–∫—Ç—É—Ä–∞ JSON:
{
  "intent": "find_companies" | "general_question" | "unclear",
  "location": "string | null",
  "activity_keywords": ["string"] | null,
  "quantity": "number | null,
  "page_number": "number",
  "reasoning": "–ö—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–π –ª–æ–≥–∏–∫–∏.",
  "preliminary_response": "–û—Ç–≤–µ—Ç-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–∫–∞ –∏–¥–µ—Ç –ø–æ–∏—Å–∫."
}

--- –ü–†–ò–ú–ï–†–´ ---

–ü—Ä–∏–º–µ—Ä 1: –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
–ò—Å—Ç–æ—Ä–∏—è: []
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–ù–∞–π–¥–∏ 15 IT –∫–æ–º–ø–∞–Ω–∏–π –≤ Almaty"
–û–∂–∏–¥–∞–µ–º—ã–π JSON:
{
  "intent": "find_companies",
  "location": "–ê–ª–º–∞—Ç—ã",
  "activity_keywords": ["IT"],
  "quantity": 15,
  "page_number": 1,
  "reasoning": "–ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å. –ì–æ—Ä–æ–¥ Almaty –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ –ê–ª–º–∞—Ç—ã. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ 15, —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 1.",
  "preliminary_response": "–û—Ç–ª–∏—á–Ω–æ! –ò—â—É –¥–ª—è –≤–∞—Å 15 IT-–∫–æ–º–ø–∞–Ω–∏–π –≤ –ê–ª–º–∞—Ç—ã. –û–¥–∏–Ω –º–æ–º–µ–Ω—Ç..."
}

–ü—Ä–∏–º–µ—Ä 2: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ
–ò—Å—Ç–æ—Ä–∏—è: [
  {"role": "user", "content": "–ù–∞–π–¥–∏ 15 IT –∫–æ–º–ø–∞–Ω–∏–π –≤ Almaty"},
  {"role": "assistant", "content": "–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –Ø –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é..."}
]
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: "–¥–∞–π –µ—â–µ"
–û–∂–∏–¥–∞–µ–º—ã–π JSON:
{
  "intent": "find_companies",
  "location": "–ê–ª–º–∞—Ç—ã",
  "activity_keywords": ["IT"],
  "quantity": 15,
  "page_number": 2,
  "reasoning": "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ. –í–∑—è–ª location –∏ activity_keywords –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∑—è–ª –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –£–≤–µ–ª–∏—á–∏–ª —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–æ 2.",
  "preliminary_response": "–ö–æ–Ω–µ—á–Ω–æ! –ò—â—É —Å–ª–µ–¥—É—é—â—É—é –≥—Ä—É–ø–ø—É –∏–∑ 15 IT-–∫–æ–º–ø–∞–Ω–∏–π –≤ –ê–ª–º–∞—Ç—ã. –ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞."
}
"""

class GeminiService:
    def __init__(self):
        self.settings = get_settings()
        self.gemini_api_key = os.getenv("GEMINI_API_KEY")
        if not self.gemini_api_key:
            raise ValueError("GEMINI_API_KEY is not set in the environment variables.")
        self.gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key={self.gemini_api_key}"

    async def _parse_user_intent_with_gemini(self, history: List[Dict[str, str]]) -> Dict[str, Any]:
        """
        Uses Gemini to parse the user's intent from conversation history.
        """
        full_prompt_text = f"{GEMINI_INTENT_PROMPT}\n\n---\n\n–ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:\n{json.dumps(history, ensure_ascii=False)}\n\n---\n\n–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏ –∏ –≤–µ—Ä–Ω–∏ JSON."

        payload = {"contents": [{"parts": [{"text": full_prompt_text}]}]}
        
        try:
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.post(self.gemini_url, json=payload)
                response.raise_for_status()
                
                g_data = response.json()
                raw_json_text = g_data["candidates"][0]["content"]["parts"][0]["text"]
                
                # –û—á–∏—Å—Ç–∫–∞ –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö ```json ... ``` –æ–±–µ—Ä—Ç–æ–∫
                cleaned_json_text = re.sub(r'```json\s*([\s\S]*?)\s*```', r'\1', raw_json_text, re.DOTALL).strip()
                
                parsed_result = json.loads(cleaned_json_text)
                print(f"‚úÖ [GEMINI_PARSER] Gemini response parsed successfully: {parsed_result}")
                return parsed_result

        except Exception as e:
            print(f"‚ùå [GEMINI_PARSER] Error during Gemini intent parsing: {e}")
            traceback.print_exc()
            return {
                "intent": "unclear",
                "location": None,
                "activity_keywords": None,
                "quantity": 10,
                "page_number": 1,
                "reasoning": f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ Gemini: {str(e)}",
                "preliminary_response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ."
            }

    def _generate_summary_response(self, history: List[Dict[str, str]], companies_data: List[Dict[str, Any]]) -> str:
        """Craft a summary response based on found companies."""
        if not companies_data:
            return "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞."

        count = len(companies_data)
        if count == 1:
            opening = f"–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –Ø –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {count} –∫–æ–º–ø–∞–Ω–∏–∏:"
        elif 2 <= count <= 4:
            opening = f"–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –Ø –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {count} –∫–æ–º–ø–∞–Ω–∏—è—Ö:"
        else:
            opening = f"–û—Ç–ª–∏—á–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –Ø –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ {count} –∫–æ–º–ø–∞–Ω–∏—è—Ö:"

        parts = [opening, ""]
        for comp in companies_data:
            name = comp.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è")
            activity = comp.get("activity", "–î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞")
            locality = comp.get("locality", "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ")
            entry = f"‚Ä¢ **{name}**\n  - –î–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {activity}\n  - –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: {locality}"
            parts.append(entry)
        
        parts.append("\n–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å!")
        return "\n".join(parts)

    async def handle_conversation_turn(self, user_input: str, history: List[Dict[str, str]], db: Session, conversation_id: Optional[str] = None) -> Dict[str, Any]:
        """Main logic for handling a conversation turn using Gemini."""
        print(f"üîÑ [SERVICE] Handling turn with Gemini for: {user_input[:100]}...")
        
        history.append({"role": "user", "content": user_input})
        
        parsed_intent = await self._parse_user_intent_with_gemini(history)

        intent = parsed_intent.get("intent")
        location = parsed_intent.get("location")
        activity_keywords = parsed_intent.get("activity_keywords")
        page = parsed_intent.get("page_number", 1)
        search_limit = parsed_intent.get("quantity", 10)
        offset = (page - 1) * search_limit
        final_message = parsed_intent.get("preliminary_response", "–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        companies_data = []

        if intent == "find_companies" and location:
            print(f"üè¢ Searching DB: location='{location}', keywords={activity_keywords}, limit={search_limit}, offset={offset}")
            company_service = CompanyService(db)
            db_companies = company_service.search_companies(
                location=location,
                activity_keywords=activity_keywords,
                limit=search_limit,
                offset=offset
            )
            
            print(f"üìà Found {len(db_companies) if db_companies else 0} companies in database.")
            
            if db_companies:
                companies_data = db_companies
                final_message = self._generate_summary_response(history, companies_data)
            else:
                final_message = f"–Ø –∏—Å–∫–∞–ª –∫–æ–º–ø–∞–Ω–∏–∏ –≤ {location}, –Ω–æ –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É. –ú–æ–∂–µ—Ç, –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞?"
        
        elif intent == "find_companies" and not location:
            final_message = "–ß—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏, –º–Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å, –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–∫–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ."

        assistant_response_for_history = {
            "role": "assistant",
            "content": final_message,
            "metadata": {"companies": companies_data}
        }
        history.append(assistant_response_for_history)

        return {
            'message': final_message,
            'companies': companies_data,
            'updated_history': history,
            'reasoning': parsed_intent.get('reasoning'),
            'metadata': {"companies": companies_data}
        }

# Global service instance
ai_service = GeminiService()