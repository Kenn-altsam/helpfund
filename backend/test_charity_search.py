#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–∏—Å–∫–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏
"""

import asyncio
import httpx
import json
from src.core.config import get_settings

async def test_charity_search():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–∏—Å–∫ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ –¢–ï–õ–ï–†–ê–î–ò–û–ö–û–†–ü–û–†–ê–¶–ò–Ø –ö–ê–ó–ê–•–°–¢–ê–ù"""
    
    settings = get_settings()
    company_name = "–¢–ï–õ–ï–†–ê–î–ò–û–ö–û–†–ü–û–†–ê–¶–ò–Ø –ö–ê–ó–ê–•–°–¢–ê–ù"
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–∏—Å–∫ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è: {company_name}")
    print(f"üìã API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã: Google API - {'–î–∞' if settings.GOOGLE_API_KEY else '–ù–µ—Ç'}")
    print(f"üìã Search Engine ID: {'–î–∞' if settings.GOOGLE_SEARCH_ENGINE_ID else '–ù–µ—Ç'}")
    
    # –¢–µ—Å—Ç 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Google Custom Search API
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 1: –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Google Custom Search API")
    print("="*60)
    
    # –û—á–∏—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
    clean_company_name = company_name.replace('"', '').replace('¬´', '').replace('¬ª', '').strip()
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        f'"{clean_company_name}" –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        f'"{clean_company_name}" —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å',
        f'"{clean_company_name}" —Ñ–æ–Ω–¥ –ø–æ–º–æ—â—å',
        f'"{clean_company_name}" —Å–ø–æ–Ω—Å–∏—Ä—É–µ—Ç',
        f'"{clean_company_name}" –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è'
    ]
    
    timeout = httpx.Timeout(connect=5.0, read=30.0, write=10.0, pool=5.0)
    async with httpx.AsyncClient(timeout=timeout) as client:
        for i, query in enumerate(test_queries, 1):
            print(f"\nüîç –ó–∞–ø—Ä–æ—Å {i}: {query}")
            
            search_url = (
                f"https://www.googleapis.com/customsearch/v1?"
                f"key={settings.GOOGLE_API_KEY}&"
                f"cx={settings.GOOGLE_SEARCH_ENGINE_ID}&"
                f"q={query}&"
                f"num=5&"
                f"lr=lang_ru&"
                f"gl=kz"
            )
            
            try:
                response = await client.get(search_url)
                response.raise_for_status()
                data = response.json()
                
                if 'items' in data:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(data['items'])}")
                    for j, item in enumerate(data['items'], 1):
                        title = item.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞')
                        snippet = item.get('snippet', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                        link = item.get('link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')
                        
                        print(f"  {j}. {title}")
                        print(f"     {snippet[:100]}...")
                        print(f"     {link}")
                        print()
                else:
                    print("‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    if 'error' in data:
                        print(f"   –û—à–∏–±–∫–∞ API: {data['error']}")
                
            except httpx.HTTPStatusError as e:
                print(f"‚ùå HTTP –æ—à–∏–±–∫–∞: {e.response.status_code}")
                if e.response.status_code == 429:
                    print("   –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                elif e.response.status_code == 403:
                    print("   –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ API")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            if i < len(test_queries):
                await asyncio.sleep(1)
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω)
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ API —Ä–æ—É—Ç–µ—Ä")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    try:
        async with httpx.AsyncClient(timeout=5.0) as client:
            response = await client.get("http://localhost:8000/docs")
            if response.status_code == 200:
                print("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
                print("‚ÑπÔ∏è  –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
                print("   curl -X POST http://localhost:8000/api/v1/ai/charity-research \\")
                print("     -H 'Content-Type: application/json' \\")
                print("     -H 'Authorization: Bearer YOUR_TOKEN' \\")
                print(f"     -d '{{\"company_name\": \"{company_name}\"}}'")
            else:
                print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ localhost:8000")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        print("‚ÑπÔ∏è  –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: python run.py")

if __name__ == "__main__":
    asyncio.run(test_charity_search()) 