from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
import traceback
import uuid
import httpx
import os
from typing import Optional
from dotenv import load_dotenv

load_dotenv()

from .models import ChatRequest, ChatResponse, CompanyCharityRequest, CompanyCharityResponse
from .assistant_creator import handle_conversation_with_context
from ..core.database import get_db
from ..auth.models import User
from ..auth.dependencies import get_current_user
from ..chats import service as chat_service

router = APIRouter(prefix="/ai", tags=["AI Conversation"])


@router.post("/chat-assistant", response_model=ChatResponse)
def handle_chat_with_assistant(
    request: ChatRequest, 
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user) 
):
    """
    Handle an AI conversation turn with database persistence.
    - Manages chat history and OpenAI thread context via the database.
    - Saves the new conversation turn to the database.
    """
    import time
    start_time = time.time()
    
    print(f"üí¨ [CHAT_ASSISTANT] New chat request from user {current_user.id}")
    print(f"üìù [CHAT_ASSISTANT] Input length: {len(request.user_input)} characters")
    
    if not request.user_input.strip():
        print(f"‚ùå [CHAT_ASSISTANT] Empty input rejected")
        raise HTTPException(status_code=400, detail="User input cannot be empty")
    
    db_chat_id: Optional[uuid.UUID] = None
    if request.chat_id:
        try:
            db_chat_id = uuid.UUID(request.chat_id)
            print(f"üîó [CHAT_ASSISTANT] Using existing chat ID: {db_chat_id}")
        except ValueError:
            print(f"‚ùå [CHAT_ASSISTANT] Invalid chat_id format: {request.chat_id}")
            raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
    else:
        print(f"üÜï [CHAT_ASSISTANT] Creating new chat session")

    print(f"üöÄ [CHAT_ASSISTANT] Starting conversation processing for user {current_user.id}")

    try:
        response_data = handle_conversation_with_context(
            user_input=request.user_input,
            db=db,
            user=current_user,
            chat_id=db_chat_id,
            assistant_id=request.assistant_id,
        )

        if "error" in response_data:
            print(f"‚ùå [CHAT_ASSISTANT] AI handler returned error: {response_data.get('details', 'Unknown error')}")
            raise HTTPException(status_code=500, detail=response_data.get("details", "An unknown error occurred in the AI handler."))

        companies_count = len(response_data.get("companies_found", []))
        total_duration = time.time() - start_time
        
        print(f"‚úÖ [CHAT_ASSISTANT] Successfully processed chat in {total_duration:.2f}s")
        print(f"üè¢ [CHAT_ASSISTANT] Found {companies_count} companies in response")
        print(f"üí≠ [CHAT_ASSISTANT] Chat ID: {response_data.get('chat_id')}, Thread ID: {response_data.get('thread_id')}")

        return ChatResponse(
            message=response_data.get("response"),
            companies=response_data.get("companies_found", []),
            assistant_id=response_data.get('assistant_id'),
            chat_id=response_data.get('chat_id'),
            openai_thread_id=response_data.get("thread_id")
        )
        
    except Exception as e:
        total_duration = time.time() - start_time
        print(f"‚ùå [CHAT_ASSISTANT] Error in chat endpoint after {total_duration:.2f}s: {str(e)}")
        traceback.print_exc()
        if isinstance(e, HTTPException):
            raise
        raise HTTPException(
            status_code=500, 
            detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.post("/charity-research", response_model=CompanyCharityResponse)
async def get_company_charity_info(
    request: CompanyCharityRequest,
    current_user = Depends(get_current_user)
):
    """
    Research company's charity involvement using Google Search and Gemini AI.
    Searches for information about company's charitable activities without storing in database.
    """
    import time
    start_time = time.time()
    
    print(f"üîç [CHARITY_RESEARCH] Starting research for company: '{request.company_name}'")
    print(f"üë§ [CHARITY_RESEARCH] Requested by user ID: {current_user.id}")
    
    try:
        # Get API keys from environment
        GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
        SEARCH_ENGINE_ID = os.getenv("GOOGLE_SEARCH_ENGINE_ID")
        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
        
        print(f"üîë [CHARITY_RESEARCH] API keys status - Google: {'‚úì' if GOOGLE_API_KEY else '‚úó'}, Search Engine: {'‚úì' if SEARCH_ENGINE_ID else '‚úó'}, Gemini: {'‚úì' if GEMINI_API_KEY else '‚úó'}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–µ–π
        if not all([GOOGLE_API_KEY, SEARCH_ENGINE_ID, GEMINI_API_KEY]):
            print(f"‚ùå [CHARITY_RESEARCH] Missing API keys - cannot proceed")
            return CompanyCharityResponse(
                status="error",
                answer="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Gemini API –∫–ª—é—á–∞
        if not GEMINI_API_KEY or len(GEMINI_API_KEY.strip()) < 10:
            print(f"‚ùå [CHARITY_RESEARCH] Invalid Gemini API key format")
            return CompanyCharityResponse(
                status="error",
                answer="–ü—Ä–æ–±–ª–µ–º–∞ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π AI —Å–µ—Ä–≤–∏—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # Search for charity information about the company
        query = f"{request.company_name} –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å OR charity OR —Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ OR donation site:facebook.com OR site:instagram.com OR site:x.com"
        search_url = (
            f"https://www.googleapis.com/customsearch/v1?q={query}"
            f"&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}"
        )
        
        print(f"üîç [CHARITY_RESEARCH] Google search query: '{query}'")
        print(f"üåê [CHARITY_RESEARCH] Sending request to Google Custom Search API...")

        async with httpx.AsyncClient() as client:
            try:
                google_start_time = time.time()
                g_res = await client.get(search_url)
                g_res.raise_for_status()
                search_data = g_res.json()
                items = search_data.get("items", [])[:5]
                google_duration = time.time() - google_start_time
                print(f"‚úÖ [CHARITY_RESEARCH] Google Search completed in {google_duration:.2f}s - found {len(items)} results")
            except httpx.RequestError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Google Search API error: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."
                )
            except httpx.HTTPStatusError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Google Search HTTP error {e.response.status_code}: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        # Extract links and snippets
        links = [item.get("link", "") for item in items]
        snippets = [item.get("snippet", "") for item in items]
        
        print(f"üìã [CHARITY_RESEARCH] Extracted {len(links)} links and {len(snippets)} snippets")
        if links:
            print(f"üîó [CHARITY_RESEARCH] Top search results domains: {', '.join([link.split('/')[2] if '/' in link else link for link in links[:3]])}")

        # Check if we have enough data to proceed
        if not snippets or not any(snippets):
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] No search results found for company '{request.company_name}'")
            return CompanyCharityResponse(
                status="warning",
                answer=f"–î–∞–Ω–Ω—ã—Ö –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
            )

        # Create summary text for Gemini
        text_summary = "\n".join(snippets)
        summary_length = len(text_summary)
        print(f"üìù [CHARITY_RESEARCH] Created summary text with {summary_length} characters for Gemini analysis")
        
        # Clean text and links before creating prompt
        import re

        # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, emoji, HTML, —Å–ø–µ—Ü–∑–Ω–∞–∫–æ–≤)
        def clean_text(text):
            if text is None:
                return ""
            text = str(text)
            text = re.sub(r"<[^>]+>", "", text)  # —É–¥–∞–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤
            text = re.sub(r"[^\x00-\x7F–∞-—è–ê-–Ø—ë–Å\s.,:;!?()/-]", "", text)  # —Ç–æ–ª—å–∫–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
            return text.replace('\r', '').replace('\u200b', '').strip()

        text_summary_clean = clean_text(text_summary)
        links_clean = [link.strip() for link in links]
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É summary
        if len(text_summary_clean) > 1000:
            text_summary_clean = text_summary_clean[:1000] + "..."
        
        print(f"üßπ [CHARITY_RESEARCH] Cleaned text summary: {len(text_summary_clean)} characters (was {len(text_summary)})")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        if not text_summary_clean or len(text_summary_clean.strip()) < 10:
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Cleaned text summary is too short or empty")
            return CompanyCharityResponse(
                status="warning",
                answer=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}'."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Å—Å—ã–ª–∫–∞
        valid_links = [link for link in links_clean if link and link.startswith('http')]
        if not valid_links:
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] No valid links found")
            return CompanyCharityResponse(
                status="warning",
                answer=f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}'."
            )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è payload
        def clean_for_payload(text):
            if text is None:
                return ""
            # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã
            text = str(text).strip()
            text = re.sub(r'\n\s*\n\s*\n', '\n\n', text)  # –£–±–∏—Ä–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã
            text = re.sub(r'\s+', ' ', text)  # –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
            text = re.sub(r'None|NaN|undefined', '', text)  # –£–±–∏—Ä–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            return text.strip()

        # –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è payload
        company_name_clean = clean_for_payload(request.company_name)
        text_summary_clean = clean_for_payload(text_summary_clean)
        links_clean = [clean_for_payload(link) for link in links_clean if link and link.strip()]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏
        if not company_name_clean or not text_summary_clean or not links_clean:
            print(f"‚ùå [CHARITY_RESEARCH] Data validation failed after cleaning")
            return CompanyCharityResponse(
                status="error",
                answer="–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
            )
        
        # Create prompt for Gemini
        prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —É—á–∞—Å—Ç–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´{company_name_clean}¬ª –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∏–∂–µ.

üîπ –û–ø–∏—Å–∞–Ω–∏–µ:
{text_summary_clean}

üîπ –°—Å—ã–ª–∫–∏:
{chr(10).join(links_clean)}

–ï—Å–ª–∏ —Å—Ä–µ–¥–∏ —Å—Å—ã–ª–æ–∫ –µ—Å—Ç—å —Å–æ—Ü—Å–µ—Ç–∏ (Facebook, Instagram –∏ —Ç.–¥.) ‚Äî —É—á—Ç–∏ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.

–î–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥:

1. –£—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–¥–∞ / –Ω–µ—Ç / –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ)
2. –ö–∞–∫–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
3. –†–µ–≥—É–ª—è—Ä–Ω–æ—Å—Ç—å (–ø–æ—Å—Ç–æ—è–Ω–Ω–æ / –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ / —Ä–∞–∑–æ–≤–æ)
4. –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–º–æ—â–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –¥–µ—Ç–∏, –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ —Ç.–¥.)
5. –£–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö:
   ‚Äì –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, Instagram)
   ‚Äì –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ

‚ö†Ô∏è –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∏ —Å—Å—ã–ª–æ–∫. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚Äî –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:

- ¬´–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ ¬´{company_name_clean}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.¬ª
- ¬´–ö–æ–º–ø–∞–Ω–∏—è –º–æ–≥–ª–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å, –Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.¬ª
- ¬´–î–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö —Å–≤–µ–¥–µ–Ω–∏–π –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.¬ª

–ó–∞–≤–µ—Ä—à–∏ –±–ª–æ–∫–æ–º:

–ò—Å—Ç–æ—á–Ω–∏–∫–∏:
- [–¥–æ–º–µ–Ω –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ] ‚Äì [—Å—Å—ã–ª–∫–∞]

–ü—Ä–∏–º–µ—Ä:
–ò—Å—Ç–æ—á–Ω–∏–∫–∏:
- Facebook ‚Äì https://facebook.com/...
- –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç ‚Äì https://company.com/...

–û—Ç–≤–µ—Ç—å –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É, –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."""
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
        prompt = clean_for_payload(prompt)
        
        print(f"üßπ [CHARITY_RESEARCH] Final prompt length: {len(prompt)} characters")
        print(f"üîç [CHARITY_RESEARCH] Prompt preview: {prompt[:200]}...")

        # Send request to Gemini API
        gemini_url = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent?key={GEMINI_API_KEY}"

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload
        gemini_payload = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": prompt  # —Å—Ç—Ä–æ–∫–∞, –æ—á–∏—â–µ–Ω–Ω–∞—è –æ—Ç None –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
                        }
                    ]
                }
            ]
        }
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è payload —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if not isinstance(prompt, str) or not prompt.strip():
            print(f"‚ùå [CHARITY_RESEARCH] Invalid prompt type or empty: {type(prompt)}")
            return CompanyCharityResponse(
                status="error",
                answer="–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI —Å–µ—Ä–≤–∏—Å—É."
            )
        
        print(f"üì¶ [CHARITY_RESEARCH] Payload structure validated")
        print(f"üìù [CHARITY_RESEARCH] Payload text type: {type(prompt)}")
        print(f"üìè [CHARITY_RESEARCH] Payload text length: {len(prompt)}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è payload –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if not prompt or len(prompt.strip()) < 50:
            print(f"‚ùå [CHARITY_RESEARCH] Invalid prompt - too short or empty")
            return CompanyCharityResponse(
                status="error",
                answer="–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ AI —Å–µ—Ä–≤–∏—Å—É."
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä payload (Gemini –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç—ã)
        payload_size = len(str(gemini_payload))
        if payload_size > 30000:  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è Gemini
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Payload too large: {payload_size} characters")
            # –û–±—Ä–µ–∑–∞–µ–º –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π
            prompt = prompt[:2000] + "..."
            gemini_payload = {
                "contents": [{"parts": [{"text": prompt}]}]
            }
            print(f"üìù [CHARITY_RESEARCH] Truncated prompt to {len(prompt)} characters")
        
        print(f"ü§ñ [CHARITY_RESEARCH] Sending analysis request to Gemini 2.5 Pro API...")
        print(f"üìä [CHARITY_RESEARCH] Prompt length: {len(prompt)} characters")
        print(f"üì¶ [CHARITY_RESEARCH] Payload size: {payload_size} characters")

        async with httpx.AsyncClient() as client:
            try:
                gemini_start_time = time.time()
                gemini_res = await client.post(gemini_url, json=gemini_payload)
                gemini_duration = time.time() - gemini_start_time
                
                if not gemini_res.is_success:
                    status_code = gemini_res.status_code
                    error_text = gemini_res.text
                    
                    print(f"‚ùå [CHARITY_RESEARCH] Gemini API error: {status_code}")
                    print(f"üìÑ [CHARITY_RESEARCH] Gemini error body: {error_text}")
                    
                    # –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –∏–∑ JSON –æ—Ç–≤–µ—Ç–∞
                    try:
                        error_json = gemini_res.json()
                        print(f"üîç [CHARITY_RESEARCH] Gemini error details: {error_json}")
                    except:
                        print(f"üîç [CHARITY_RESEARCH] Could not parse error response as JSON")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫ Gemini API
                    if status_code == 400:
                        print(f"üîç [CHARITY_RESEARCH] Bad request - –≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã")
                        return CompanyCharityResponse(
                            status="error",
                            answer="–û—à–∏–±–∫–∞ –≤ –∑–∞–ø—Ä–æ—Å–µ –∫ AI —Å–µ—Ä–≤–∏—Å—É. –í–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
                        )
                    elif status_code == 403:
                        print(f"üîë [CHARITY_RESEARCH] Forbidden - –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç—ë–∫—à–∏–π API-–∫–ª—é—á")
                        return CompanyCharityResponse(
                            status="error",
                            answer="–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ AI —Å–µ—Ä–≤–∏—Å—É. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
                        )
                    elif status_code == 429:
                        print(f"‚è±Ô∏è [CHARITY_RESEARCH] Rate limit exceeded - –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
                        return CompanyCharityResponse(
                            status="error",
                            answer="–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ AI —Å–µ—Ä–≤–∏—Å—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        )
                    elif status_code >= 500:
                        print(f"üö® [CHARITY_RESEARCH] Server error - –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ Gemini")
                        return CompanyCharityResponse(
                            status="error",
                            answer="–í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ AI —Å–µ—Ä–≤–∏—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        )
                    else:
                        return CompanyCharityResponse(
                            status="error",
                            answer="AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                        )
                
                g_data = gemini_res.json()
                print(f"‚úÖ [CHARITY_RESEARCH] Gemini API response received in {gemini_duration:.2f}s")
                print(f"üìä [CHARITY_RESEARCH] Response status: {gemini_res.status_code}")
                print(f"üìÑ [CHARITY_RESEARCH] Response size: {len(gemini_res.text)} characters")
                
                # –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                if "candidates" in g_data:
                    print(f"‚úÖ [CHARITY_RESEARCH] Response contains {len(g_data['candidates'])} candidates")
                else:
                    print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Response structure: {list(g_data.keys())}")
            except httpx.RequestError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Gemini API error: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI —Å–µ—Ä–≤–∏—Å—É."
                )
            except httpx.HTTPStatusError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Gemini API HTTP error {e.response.status_code}: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        # Extract answer from Gemini response
        try:
            answer = g_data["candidates"][0]["content"]["parts"][0]["text"]
            answer_length = len(answer)
            print(f"üìù [CHARITY_RESEARCH] Gemini analysis extracted - length: {answer_length} characters")
            
            # Validate that we got a meaningful response
            if not answer or len(answer.strip()) < 10:
                print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Gemini returned empty or too short response")
                return CompanyCharityResponse(
                    status="warning",
                    answer=f"–ö–æ–º–ø–∞–Ω–∏—è '{request.company_name}' –º–æ–≥–ª–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–Ω–µ—Ü –æ—Ç–≤–µ—Ç–∞
            final_answer = answer.strip()
            if valid_links:
                final_answer += "\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏:\n"
                for i, link in enumerate(valid_links):
                    final_answer += f"{i+1}. {link}\n"
                print(f"üîó [CHARITY_RESEARCH] Added {len(valid_links)} source links to response")
            else:
                final_answer = answer.strip()
                print(f"‚ö†Ô∏è [CHARITY_RESEARCH] No valid links to add to response")
                
        except (KeyError, IndexError) as e:
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Failed to extract answer from Gemini response: {str(e)}")
            return CompanyCharityResponse(
                status="error",
                answer="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        total_duration = time.time() - start_time
        print(f"‚úÖ [CHARITY_RESEARCH] Successfully completed analysis for '{request.company_name}' in {total_duration:.2f}s")
        print(f"üìä [CHARITY_RESEARCH] Final response size: {len(final_answer)} characters")
        
        return CompanyCharityResponse(
            status="success",
            answer=final_answer
        )

    except Exception as e:
        total_duration = time.time() - start_time
        print(f"‚ùå [CHARITY_RESEARCH] Unexpected error analyzing charity info for '{request.company_name}' after {total_duration:.2f}s: {str(e)}")
        traceback.print_exc()
        return CompanyCharityResponse(
            status="error",
            answer="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        ) 