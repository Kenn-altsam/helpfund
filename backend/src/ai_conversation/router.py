from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.orm import Session
import traceback
import uuid
import httpx
import os
import asyncio
from typing import Optional, List
from dotenv import load_dotenv

load_dotenv()

from .models import ChatRequest, ChatResponse, CompanyCharityRequest, CompanyCharityResponse
from .assistant_creator import handle_conversation_with_context
from ..core.database import get_db
from ..auth.models import User
from ..auth.dependencies import get_current_user
from ..chats import service as chat_service

router = APIRouter(prefix="/ai", tags=["AI Conversation"])


async def filter_valid_links(links: List[str], timeout: float = 5.0) -> List[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å—Å—ã–ª–æ–∫ —Å –ø–æ–º–æ—â—å—é HEAD-–∑–∞–ø—Ä–æ—Å–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–≤–µ—á–∞—é—Ç —É—Å–ø–µ—à–Ω–æ.
    
    Args:
        links: –°–ø–∏—Å–æ–∫ URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        timeout: –¢–∞–π–º–∞—É—Ç –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    """
    if not links:
        return []
    
    print(f"üîç [LINK_VALIDATION] Checking {len(links)} links for availability...")
    
    async def check_link(url: str) -> tuple[str, bool]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–¥–Ω—É —Å—Å—ã–ª–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (url, is_valid)"""
        try:
            async with httpx.AsyncClient(timeout=timeout) as client:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º HEAD –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ç—Ä–∞—Ñ–∏–∫–∞
                response = await client.head(url, follow_redirects=True)
                is_valid = response.status_code < 400  # 2xx –∏ 3xx —Å—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º–∏
                if is_valid:
                    print(f"‚úÖ [LINK_VALIDATION] {url} - Status: {response.status_code}")
                else:
                    print(f"‚ùå [LINK_VALIDATION] {url} - Status: {response.status_code}")
                return url, is_valid
        except httpx.TimeoutException:
            print(f"‚è∞ [LINK_VALIDATION] {url} - Timeout after {timeout}s")
            return url, False
        except httpx.RequestError as e:
            print(f"üåê [LINK_VALIDATION] {url} - Request error: {str(e)}")
            return url, False
        except Exception as e:
            print(f"‚ö†Ô∏è [LINK_VALIDATION] {url} - Unexpected error: {str(e)}")
            return url, False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [check_link(url) for url in links]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω—ã–µ —Å—Å—ã–ª–∫–∏
        valid_links = []
        for result in results:
            if isinstance(result, tuple):
                url, is_valid = result
                if is_valid:
                    valid_links.append(url)
            elif isinstance(result, Exception):
                print(f"‚ö†Ô∏è [LINK_VALIDATION] Task failed with exception: {str(result)}")
        
        print(f"‚úÖ [LINK_VALIDATION] Found {len(valid_links)} valid links out of {len(links)}")
        if valid_links:
            print(f"üîó [LINK_VALIDATION] Valid domains: {', '.join([link.split('/')[2] if '/' in link else link for link in valid_links[:3]])}")
        
        return valid_links
        
    except Exception as e:
        print(f"‚ùå [LINK_VALIDATION] Critical error during link validation: {str(e)}")
        # –í —Å–ª—É—á–∞–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å–µ —Å—Å—ã–ª–∫–∏ –∫–∞–∫ –≤–∞–ª–∏–¥–Ω—ã–µ
        print(f"üîÑ [LINK_VALIDATION] Falling back to using all links without validation")
        return links


@router.post("/chat-assistant", response_model=ChatResponse)
def handle_chat_with_assistant(
    request: ChatRequest, 
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user) 
):
    """
    Handle an AI conversation turn with database persistence.
    - Manages chat history and OpenAI thread context via the database.
    - Saves the new conversation turn to the database.
    """
    import time
    start_time = time.time()
    
    print(f"üí¨ [CHAT_ASSISTANT] New chat request from user {current_user.id}")
    print(f"üìù [CHAT_ASSISTANT] Input length: {len(request.user_input)} characters")
    
    if not request.user_input.strip():
        print(f"‚ùå [CHAT_ASSISTANT] Empty input rejected")
        raise HTTPException(status_code=400, detail="User input cannot be empty")
    
    db_chat_id: Optional[uuid.UUID] = None
    if request.chat_id:
        try:
            db_chat_id = uuid.UUID(request.chat_id)
            print(f"üîó [CHAT_ASSISTANT] Using existing chat ID: {db_chat_id}")
        except ValueError:
            print(f"‚ùå [CHAT_ASSISTANT] Invalid chat_id format: {request.chat_id}")
            raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
    else:
        print(f"üÜï [CHAT_ASSISTANT] Creating new chat session")

    print(f"üöÄ [CHAT_ASSISTANT] Starting conversation processing for user {current_user.id}")

    try:
        response_data = handle_conversation_with_context(
            user_input=request.user_input,
            db=db,
            user=current_user,
            chat_id=db_chat_id,
            assistant_id=request.assistant_id,
        )

        if "error" in response_data:
            print(f"‚ùå [CHAT_ASSISTANT] AI handler returned error: {response_data.get('details', 'Unknown error')}")
            raise HTTPException(status_code=500, detail=response_data.get("details", "An unknown error occurred in the AI handler."))

        companies_count = len(response_data.get("companies_found", []))
        total_duration = time.time() - start_time
        
        print(f"‚úÖ [CHAT_ASSISTANT] Successfully processed chat in {total_duration:.2f}s")
        print(f"üè¢ [CHAT_ASSISTANT] Found {companies_count} companies in response")
        print(f"üí≠ [CHAT_ASSISTANT] Chat ID: {response_data.get('chat_id')}, Thread ID: {response_data.get('thread_id')}")

        return ChatResponse(
            message=response_data.get("response"),
            companies=response_data.get("companies_found", []),
            assistant_id=response_data.get('assistant_id'),
            chat_id=response_data.get('chat_id'),
            openai_thread_id=response_data.get("thread_id")
        )
        
    except Exception as e:
        total_duration = time.time() - start_time
        print(f"‚ùå [CHAT_ASSISTANT] Error in chat endpoint after {total_duration:.2f}s: {str(e)}")
        traceback.print_exc()
        if isinstance(e, HTTPException):
            raise
        raise HTTPException(
            status_code=500, 
            detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )


@router.post("/charity-research", response_model=CompanyCharityResponse)
async def get_company_charity_info(
    request: CompanyCharityRequest,
    current_user = Depends(get_current_user)
):
    """
    Research company's charity involvement using Google Search and Gemini AI.
    Searches for information about company's charitable activities without storing in database.
    """
    import time
    start_time = time.time()
    
    print(f"üîç [CHARITY_RESEARCH] Starting research for company: '{request.company_name}'")
    print(f"üë§ [CHARITY_RESEARCH] Requested by user ID: {current_user.id}")
    
    try:
        # Get API keys from environment
        GOOGLE_API_KEY = os.getenv("GOOGLE_API_KEY")
        SEARCH_ENGINE_ID = os.getenv("GOOGLE_SEARCH_ENGINE_ID")
        GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
        
        print(f"üîë [CHARITY_RESEARCH] API keys status - Google: {'‚úì' if GOOGLE_API_KEY else '‚úó'}, Search Engine: {'‚úì' if SEARCH_ENGINE_ID else '‚úó'}, Gemini: {'‚úì' if GEMINI_API_KEY else '‚úó'}")
        
        if not all([GOOGLE_API_KEY, SEARCH_ENGINE_ID, GEMINI_API_KEY]):
            print(f"‚ùå [CHARITY_RESEARCH] Missing API keys - cannot proceed")
            return CompanyCharityResponse(
                status="error",
                answer="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
        
        # Search for charity information about the company
        query = f"{request.company_name} –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å OR charity OR —Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–æ OR donation"
        search_url = (
            f"https://www.googleapis.com/customsearch/v1?q={query}"
            f"&key={GOOGLE_API_KEY}&cx={SEARCH_ENGINE_ID}"
        )
        
        print(f"üîç [CHARITY_RESEARCH] Google search query: '{query}'")
        print(f"üåê [CHARITY_RESEARCH] Sending request to Google Custom Search API...")

        async with httpx.AsyncClient() as client:
            try:
                google_start_time = time.time()
                g_res = await client.get(search_url)
                g_res.raise_for_status()
                search_data = g_res.json()
                items = search_data.get("items", [])[:5]
                google_duration = time.time() - google_start_time
                print(f"‚úÖ [CHARITY_RESEARCH] Google Search completed in {google_duration:.2f}s - found {len(items)} results")
            except httpx.RequestError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Google Search API error: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ. –í–æ–∑–º–æ–∂–Ω–æ, –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ø–æ–∏—Å–∫–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ."
                )
            except httpx.HTTPStatusError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Google Search HTTP error {e.response.status_code}: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="–ü–æ–∏—Å–∫–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        # Extract links and snippets
        links = [item.get("link", "") for item in items]
        snippets = [item.get("snippet", "") for item in items]
        
        print(f"üìã [CHARITY_RESEARCH] Extracted {len(links)} links and {len(snippets)} snippets")
        if links:
            print(f"üîó [CHARITY_RESEARCH] Top search results domains: {', '.join([link.split('/')[2] if '/' in link else link for link in links[:3]])}")

        # Check if we have enough data to proceed
        if not snippets or not any(snippets):
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] No search results found for company '{request.company_name}'")
            return CompanyCharityResponse(
                status="warning",
                answer=f"–î–∞–Ω–Ω—ã—Ö –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö."
            )

        # Validate links before sending to Gemini
        valid_links = await filter_valid_links(links)
        print(f"üîó [CHARITY_RESEARCH] Using {len(valid_links)} valid links out of {len(links)} total links for Gemini analysis")
        
        # Create summary text for Gemini
        text_summary = "\n".join(snippets)
        summary_length = len(text_summary)
        print(f"üìù [CHARITY_RESEARCH] Created summary text with {summary_length} characters for Gemini analysis")
        
        # Create search links for sources using only valid links
        search_links = "\n".join(f"- {url}" for url in valid_links)
        
        # Check if we have valid links for Gemini
        if not valid_links:
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] No valid links found after validation - proceeding with snippets only")
            search_links = "–í–ê–ñ–ù–û: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–ø–∏—Å–∞–Ω–∏–π –≤—ã—à–µ."
        
        # Create prompt for Gemini
        prompt = f"""
        –ö–æ–º–ø–∞–Ω–∏—è: {request.company_name}

        –í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–π.
        
        –ó–∞–¥–∞—á–∞: –ù–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–∞—Å—Ç–∏–∏ —ç—Ç–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, —Å–ø–æ–Ω—Å–æ—Ä—Å—Ç–≤–µ –∏–ª–∏ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è—Ö.

        –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞:
        {text_summary}

        –°—Å—ã–ª–∫–∏ –Ω–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:
        {search_links}

        –ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–ê:
        1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Å—Å—ã–ª–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–π –≤—ã—à–µ
        2. –ï—Å–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–π –∏–∑ —Å—Å—ã–ª–æ–∫ –Ω–µ —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚Äî –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç–∞–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        3. –ù–ï –í–´–î–£–ú–´–í–ê–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
        4. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –µ—Å—Ç—å ‚Äî –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ—Ü–∏—Ç–∏—Ä—É–π –∏—Å—Ç–æ—á–Ω–∏–∫ —Å URL
        5. –ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º –∏ —Ç–æ—á–Ω—ã–º
        6. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ ‚Äî —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏

        –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –ø–æ —ç—Ç–∏–º –ø—Ä–∞–≤–∏–ª–∞–º.
        """

        # Send request to Gemini API
        gemini_url = f"https://generativelanguage.googleapis.com/v1/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"

        gemini_payload = {
            "contents": [{"parts": [{"text": prompt}]}]
        }
        
        print(f"ü§ñ [CHARITY_RESEARCH] Sending analysis request to Gemini 2.0 Flash API...")
        print(f"üìä [CHARITY_RESEARCH] Prompt length: {len(prompt)} characters")

        async with httpx.AsyncClient() as client:
            try:
                gemini_start_time = time.time()
                gemini_res = await client.post(gemini_url, json=gemini_payload)
                gemini_res.raise_for_status()
                g_data = gemini_res.json()
                gemini_duration = time.time() - gemini_start_time
                print(f"‚úÖ [CHARITY_RESEARCH] Gemini API response received in {gemini_duration:.2f}s")
            except httpx.RequestError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Gemini API error: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ AI —Å–µ—Ä–≤–∏—Å—É."
                )
            except httpx.HTTPStatusError as e:
                print(f"‚ùå [CHARITY_RESEARCH] Gemini API HTTP error {e.response.status_code}: {str(e)}")
                return CompanyCharityResponse(
                    status="error",
                    answer="AI —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )

        # Extract answer from Gemini response
        try:
            answer = g_data["candidates"][0]["content"]["parts"][0]["text"]
            answer_length = len(answer)
            print(f"üìù [CHARITY_RESEARCH] Gemini analysis extracted - length: {answer_length} characters")
            
            # Validate that we got a meaningful response
            if not answer or len(answer.strip()) < 10:
                print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Gemini returned empty or too short response")
                return CompanyCharityResponse(
                    status="warning",
                    answer=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{request.company_name}' –≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                )
            
            # Additional validation to ensure answer doesn't contain fabricated information
            answer_lower = answer.lower()
            if "–Ω–µ –Ω–∞–π–¥–µ–Ω–æ" in answer_lower or "–Ω–µ –Ω–∞–π–¥–µ–Ω–∞" in answer_lower or "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç" in answer_lower:
                print(f"‚úÖ [CHARITY_RESEARCH] Gemini correctly reported no information found")
            elif "http" in answer_lower and any(domain in answer_lower for domain in [link.split('/')[2] if '/' in link else link for link in valid_links]):
                print(f"‚úÖ [CHARITY_RESEARCH] Gemini provided response with source citations")
            else:
                print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Gemini response may lack proper source citations")
                
        except (KeyError, IndexError) as e:
            print(f"‚ö†Ô∏è [CHARITY_RESEARCH] Failed to extract answer from Gemini response: {str(e)}")
            return CompanyCharityResponse(
                status="error",
                answer="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

        total_duration = time.time() - start_time
        print(f"‚úÖ [CHARITY_RESEARCH] Successfully completed analysis for '{request.company_name}' in {total_duration:.2f}s")
        print(f"üìä [CHARITY_RESEARCH] Final response size: {len(answer)} characters")
        
        return CompanyCharityResponse(
            status="success",
            answer=answer
        )

    except Exception as e:
        total_duration = time.time() - start_time
        print(f"‚ùå [CHARITY_RESEARCH] Unexpected error analyzing charity info for '{request.company_name}' after {total_duration:.2f}s: {str(e)}")
        traceback.print_exc()
        return CompanyCharityResponse(
            status="error",
            answer="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        ) 