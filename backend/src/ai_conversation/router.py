from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
import traceback
import uuid
import os
import httpx
import json
import re
import asyncio
import time
from typing import List, Dict, Any
from datetime import datetime, timedelta
from collections import defaultdict
from dotenv import load_dotenv

from .models import ChatRequest, ChatResponse, CompanyCharityRequest, CompanyCharityResponse, GoogleSearchResult
# !!! –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ù–ê–® –ì–õ–ê–í–ù–´–ô –°–ï–†–í–ò–° !!!
from .service import ai_service
from ..core.database import get_db
from ..auth.models import User
from ..auth.dependencies import get_current_user
from ..chats import service as chat_service  # –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤
from ..chats.models import Chat  # –ú–æ–¥–µ–ª—å —á–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏
from ..core.config import get_settings

router = APIRouter(prefix="/ai", tags=["AI Conversation"])

# Rate limiting for individual users
user_rate_limits = defaultdict(lambda: {"requests": [], "last_reset": datetime.now()})

def check_user_rate_limit(user_id: str, max_requests: int = 20, window_seconds: int = 60) -> bool:
    """
    Check if user has exceeded rate limit
    """
    now = datetime.now()
    user_data = user_rate_limits[user_id]
    
    # Reset if window has passed
    if (now - user_data["last_reset"]).total_seconds() > window_seconds:
        user_data["requests"] = []
        user_data["last_reset"] = now
    
    # Check if limit exceeded
    if len(user_data["requests"]) >= max_requests:
        return False
    
    # Add current request
    user_data["requests"].append(now)
    return True

def get_user_wait_time(user_id: str, window_seconds: int = 60) -> float:
    """
    Get wait time for user rate limit
    """
    user_data = user_rate_limits[user_id]
    if not user_data["requests"]:
        return 0
    
    oldest_request = min(user_data["requests"])
    return max(0, window_seconds - (datetime.now() - oldest_request).total_seconds())

# ============================================================================== 
# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø API –ö–õ–Æ–ß–ï–ô –î–õ–Ø GOOGLE SEARCH ===
# ==============================================================================
# –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞ (–Ω–∞ –¥–≤–∞ —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ñ–∞–π–ª–∞)
import pathlib
env_path = pathlib.Path(__file__).parent.parent.parent.parent / '.env'
load_dotenv(dotenv_path=env_path)

# Get settings for API keys
settings = get_settings()
GOOGLE_API_KEY = settings.GOOGLE_API_KEY
GOOGLE_SEARCH_ENGINE_ID = settings.GOOGLE_SEARCH_ENGINE_ID
GEMINI_API_KEY = settings.GEMINI_API_KEY

if not GOOGLE_API_KEY:
    raise RuntimeError("GOOGLE_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
if not GOOGLE_SEARCH_ENGINE_ID:
    raise RuntimeError("GOOGLE_SEARCH_ENGINE_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
if not GEMINI_API_KEY:
    print("‚ö†Ô∏è  Warning: GEMINI_API_KEY is not set. The API key rotator will not work properly.")


# ============================================================================== 
# === –ù–û–í–´–ô, –ü–†–ê–í–ò–õ–¨–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ü–û–ò–°–ö–ê –ö–û–ú–ü–ê–ù–ò–ô –ß–ï–†–ï–ó –ë–î ===
# ==============================================================================
@router.post("/chat", response_model=ChatResponse)
async def handle_chat_with_database_search(
    request: ChatRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Handles a conversation turn by parsing user intent, searching the database for companies,
    and generating a response. This is the main endpoint for company search.
    """
    print(f"\U0001F4AC [CHAT_DB] New request from user {current_user.id}: '{request.user_input[:100]}...'")

    if not request.user_input.strip():
        raise HTTPException(status_code=400, detail="User input cannot be empty")

    # Check user rate limit
    if not check_user_rate_limit(str(current_user.id), max_requests=20, window_seconds=60):
        wait_time = get_user_wait_time(str(current_user.id), window_seconds=60)
        print(f"‚ö†Ô∏è [USER_RATE_LIMIT] User {current_user.id} exceeded rate limit. Wait {wait_time:.1f} seconds")
        raise HTTPException(
            status_code=429,
            detail=f"Rate limit exceeded. Please wait {wait_time:.1f} seconds before trying again."
        )

    try:
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        db_chat_id = None
        if request.chat_id:
            try:
                db_chat_id = uuid.UUID(request.chat_id)
                print(f"üîÑ [CHAT_DB] Using existing chat session: {db_chat_id}")
            except ValueError:
                raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
        else:
            # –ï—Å–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –ë–î
            chat_name = request.user_input[:100]
            new_chat = chat_service.create_chat(
                db=db,
                user_id=current_user.id,
                name=chat_name
            )
            db_chat_id = new_chat.id
            print(f"üÜï [CHAT_DB] Created new chat session '{chat_name}' with ID: {db_chat_id}")

        # 2. –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ ai_service.py
        # –°–µ—Ä–≤–∏—Å —Ç–µ–ø–µ—Ä—å —Å–∞–º –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –ë–î –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        response_data = await ai_service.handle_conversation_turn(
            user_input=request.user_input,
            history=[],  # –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑ –ë–î
            db=db,
            conversation_id=str(db_chat_id)
        )
        
        # 3. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        # –°–æ–æ–±—â–µ–Ω–∏—è —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Å–µ—Ä–≤–∏—Å–µ, –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ—Ç
        final_response = ChatResponse(
            message=response_data.get('message'),
            companies=response_data.get('companies', []),
            updated_history=response_data.get('updated_history', []),
            assistant_id=None, # –£ –≤–∞—Å –Ω–µ—Ç OpenAI Assistant ID –≤ —ç—Ç–æ–π –ª–æ–≥–∏–∫–µ
            chat_id=str(db_chat_id),
            openai_thread_id=None
        )

        print(f"‚úÖ [CHAT_DB] Successfully processed request. Found {len(final_response.companies)} companies.")
        return final_response

    except HTTPException:
        # Re-raise HTTP exceptions (like rate limits)
        raise
    except Exception as e:
        print(f"‚ùå [CHAT_DB] Critical error in chat endpoint: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")


@router.get("/chat/{chat_id}/history")
async def get_chat_history_for_ai(
    chat_id: str,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–ª—è AI –¥–∏–∞–ª–æ–≥–æ–≤.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ updated_history.
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç UUID
        chat_uuid = uuid.UUID(chat_id)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏—Å–ø–æ–ª—å–∑—É—è AI service
        history = ai_service._load_chat_history_from_db(db, chat_uuid)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —á–∞—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        chat = db.query(Chat).filter(
            Chat.id == chat_uuid,
            Chat.user_id == current_user.id
        ).first()
        
        if not chat:
            raise HTTPException(status_code=404, detail="Chat not found or access denied")
        
        return {
            "chat_id": str(chat_uuid),
            "title": chat.title,
            "history": history,
            "total_messages": len(history)
        }
        
    except ValueError:
        raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
    except Exception as e:
        print(f"‚ùå [AI_HISTORY] Error getting chat history: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="Failed to retrieve chat history.")





# ============================================================================== 
# === –ù–û–í–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ë–õ–ê–ì–û–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò (–û–ë–ù–û–í–õ–ï–ù–ù–´–ô –ö–û–î) ===
# ==============================================================================
@router.post("/charity-research", response_model=CompanyCharityResponse)
async def get_company_charity_info(
    request: CompanyCharityRequest,
    current_user: User = Depends(get_current_user)  # –ó–∞—â–∏—â–∞–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ –≤ Google –ø–æ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏ —Å–Ω–∏–ø–ø–µ—Ç—ã.
    """
    company_name = request.company_name

    print(f"\U0001F50D [CHARITY_RESEARCH] Starting research for company: '{company_name}' by user {current_user.id}")

    if not company_name.strip():
        raise HTTPException(status_code=400, detail="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")

    # üöÄ –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–ü–†–û–°–´: –í–°–ï–ì–û 1-2 –ó–ê–ü–†–û–°–ê –í–ú–ï–°–¢–û 8+
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Ç–µ—Ä–º–∏–Ω—ã –≤ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å –ª–æ–≥–∏—á–µ—Å–∫–∏–º–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏
    
    if request.additional_context and request.additional_context.strip():
        context = request.additional_context.strip()
        print(f"üéØ [CHARITY_RESEARCH] –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: '{context}'")
        
        # –°—Ç—Ä–æ–≥–∏–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ–º AROUND –¥–ª—è –±–ª–∏–∑–æ—Å—Ç–∏ —Å–ª–æ–≤
        search_queries = [
            f'"{company_name}" AROUND(15) ("{context}" OR "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" OR "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥" OR "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å" OR "–ö–°–û" OR "charitable foundation" OR "charity" OR "CSR")'
        ]
        print(f"üìù [CHARITY_RESEARCH] –°–æ–∑–¥–∞–Ω 1 —Å—Ç—Ä–æ–≥–∏–π –∑–∞–ø—Ä–æ—Å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º (AROUND)")
    else:
        # –î–≤–∞ —Å—Ç—Ä–æ–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º–∏ –±–ª–∏–∑–æ—Å—Ç–∏ AROUND
        search_queries = [
            # –ó–∞–ø—Ä–æ—Å 1: –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ —Ä—É—Å—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö 15 —Å–ª–æ–≤ –æ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤)
            f'"{company_name}" AROUND(15) ("–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ñ–æ–Ω–¥" OR "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å" OR "–ö–°–û" OR "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" OR "—Å–ø–æ–Ω—Å–∏—Ä—É–µ—Ç" OR "—Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É–µ—Ç" OR "–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç")',
            
            # –ó–∞–ø—Ä–æ—Å 2: –°—Ç—Ä–æ–≥–∏–π –ø–æ–∏—Å–∫ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
            f'"{company_name}" AROUND(15) ("charitable foundation" OR "charity program" OR "CSR" OR "corporate social responsibility" OR "donates" OR "sponsors" OR "charity")'
        ]
        print(f"üìù [CHARITY_RESEARCH] –°–æ–∑–¥–∞–Ω—ã 2 —Å—Ç—Ä–æ–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–∞ —Å AROUND (—Ä—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)")

    all_search_results: List[GoogleSearchResult] = []
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    charity_keywords = [
        '–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', '–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π', '—Ñ–æ–Ω–¥', '–ø–æ–º–æ—â—å', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '—Ñ–∏–Ω–∞–Ω—Å–∏—Ä—É–µ—Ç', '—Å–ø–æ–Ω—Å–∏—Ä—É–µ—Ç', '–ø—Ä–æ–≥—Ä–∞–º–º–∞', '–ø—Ä–æ–µ–∫—Ç', '–∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–∞',
        '—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å', '–ö–°–û', 'CSR', '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ',
        'charity', 'charitable', 'foundation', 'donates', 'sponsors', 'supports',
        'initiative', 'program', 'social responsibility'
    ]
    
    # –ò—Å–∫–ª—é—á–∞—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (—á—Ç–æ–±—ã –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)
    exclude_keywords = [
        '–≤–∞–∫–∞–Ω—Å–∏—è', '—Ä–∞–±–æ—Ç–∞', '–Ω–æ–≤–æ—Å—Ç–∏', '—Ä–µ–∫–ª–∞–º–∞', '–ø—Ä–æ–¥–∞–∂–∞', '—É—Å–ª—É–≥–∏',
        'vacancy', 'job', 'news', 'advertisement', 'sale', 'services',
        '–∫—É–ø–∏—Ç—å', '—Ü–µ–Ω–∞', '—Å—Ç–æ–∏–º–æ—Å—Ç—å', '–ø—Ä–∞–π—Å'
    ]
    
    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ httpx.AsyncClient –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    timeout = httpx.Timeout(connect=5.0, read=30.0, write=10.0, pool=5.0)
    async with httpx.AsyncClient(timeout=timeout) as client:
        for i, query in enumerate(search_queries):
            print(f"üîç [CHARITY_RESEARCH] –í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å {i+1}/{len(search_queries)}: '{query[:80]}...'")
            
            search_url = (
                f"https://www.googleapis.com/customsearch/v1?"
                f"key={GOOGLE_API_KEY}&"
                f"cx={GOOGLE_SEARCH_ENGINE_ID}&"
                f"q={query}&"
                f"num=10&"  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å (–∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –º–µ–Ω—å—à–µ–µ –∫–æ–ª-–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤)
                f"lr=lang_ru&"  # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—É
                f"gl=kz"  # –ì–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ - –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
            )

            try:
                response = await client.get(search_url)
                response.raise_for_status()
                search_data = response.json()
                
                found_relevant = 0
                total_found = len(search_data.get('items', []))

                if 'items' in search_data:
                    for item in search_data['items']:
                        title = item.get('title', '').lower()
                        snippet = item.get('snippet', '').lower()
                        link = item.get('link', '')
                        full_text = f"{title} {snippet}"
                        
                        # üéØ –°–¢–†–û–ì–ê–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∏ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                        company_name_variants = [
                            company_name.lower(),
                            company_name.lower().replace('"', ''),  # –±–µ–∑ –∫–∞–≤—ã—á–µ–∫
                            company_name.lower().replace('–∞–æ ', '').replace('—Ç–æ–æ ', '').replace('–æ–∞–æ ', ''),  # –±–µ–∑ –ø—Ä–∞–≤–æ–≤—ã—Ö —Ñ–æ—Ä–º
                        ]
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
                        has_company_name = any(variant in full_text for variant in company_name_variants)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–Ω–∞–ª–∏—á–∏–µ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤)
                        is_charity_relevant = any(keyword in full_text for keyword in charity_keywords)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤ (—à—É–º)
                        has_exclude_keywords = any(exclude in full_text for exclude in exclude_keywords)
                        
                        # üîç –°–¢–†–û–ì–ò–ï –ö–†–ò–¢–ï–†–ò–ò: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
                        # 1. –ï—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ 2. –ï—Å—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ 3. –ù–µ—Ç –∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å–ª–æ–≤
                        if has_company_name and is_charity_relevant and not has_exclude_keywords:
                            all_search_results.append(GoogleSearchResult(
                                title=item.get('title', '–ù–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞'),
                                link=link,
                                snippet=item.get('snippet', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                            ))
                            found_relevant += 1
                            print(f"‚úÖ [CHARITY_RESEARCH] –°—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä –ü–†–û–ô–î–ï–ù: {item.get('title', '')[:50]}...")
                        else:
                            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—á–∏–Ω –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
                            reasons = []
                            if not has_company_name:
                                reasons.append("–Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏")
                            if not is_charity_relevant:
                                reasons.append("–Ω–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤")
                            if has_exclude_keywords:
                                reasons.append("–µ—Å—Ç—å –∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å–ª–æ–≤–∞")
                            print(f"üö´ [CHARITY_RESEARCH] –°—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä –ù–ï –ü–†–û–ô–î–ï–ù ({', '.join(reasons)}): {item.get('title', '')[:50]}...")
                
                print(f"üìä [CHARITY_RESEARCH] –ó–∞–ø—Ä–æ—Å {i+1}: –Ω–∞–π–¥–µ–Ω–æ {total_found}, —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö {found_relevant}")
                
                # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (—Ç–µ–ø–µ—Ä—å –º–∞–∫—Å–∏–º—É–º 2 –∑–∞–ø—Ä–æ—Å–∞)
                if i < len(search_queries) - 1:  # –ù–µ –∂–¥–µ–º –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
                    await asyncio.sleep(1.0)  # –ù–µ–º–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                
            except httpx.RequestError as e:
                print(f"‚ùå [CHARITY_RESEARCH] –û—à–∏–±–∫–∞ HTTP –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query[:50]}...': {e}")
            except Exception as e:
                print(f"‚ùå [CHARITY_RESEARCH] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query[:50]}...': {e}")
                traceback.print_exc()

    # üéØ –°–¢–†–û–ì–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –°–í–û–î–ö–ò: –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä—è–º—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞
    if not all_search_results:
        final_summary_for_response = (
            f"–ü—Ä—è–º—ã—Ö –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{company_name}' "
            f"–≤ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö –ù–ï –ù–ê–ô–î–ï–ù–û.\n\n"
            f"–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            f"‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –≤–µ–¥–µ—Ç –ø—É–±–ª–∏—á–Ω—É—é –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n"
            f"‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –Ω–µ –æ—Å–≤–µ—â–∞—é—Ç—Å—è –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ\n"
            f"‚Ä¢ –ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–µ–¥–µ—Ç—Å—è —á–µ—Ä–µ–∑ –¥–æ—á–µ—Ä–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã\n\n"
            f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é –∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—è–º –∫–æ–º–ø–∞–Ω–∏–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å–ø–æ–Ω—Å–æ—Ä—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
        )
    else:
        # üîç –°–¢–†–û–ì–ò–ô –ê–ù–ê–õ–ò–ó: –∏—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        direct_evidence_count = 0
        charity_areas = set()
        specific_activities = []
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ü–†–Ø–ú–´–• –¥–µ–π—Å—Ç–≤–∏–π –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        direct_action_keywords = [
            '–≤—ã–¥–µ–ª–∏–ª', '–ø—Ä–æ—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–ª', '–ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–ª', '–ø–µ—Ä–µ–¥–∞–ª', '—Å–ø–æ–Ω—Å–∏—Ä–æ–≤–∞–ª',
            'donated', 'funded', 'sponsored', 'allocated', 'contributed'
        ]
        
        for result in all_search_results:
            text = (result.title + " " + result.snippet).lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            has_direct_action = any(action in text for action in direct_action_keywords)
            if has_direct_action:
                direct_evidence_count += 1
                
                # –ò—â–µ–º —Å—É–º–º—ã –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
                if any(word in text for word in ['–º–ª–Ω', '–º–ª—Ä–¥', '—Ç–µ–Ω–≥–µ', '–º–∏–ª–ª–∏–æ–Ω', 'billion', 'million']):
                    specific_activities.append('—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞–Ω–∏—è')
                if any(word in text for word in ['—Ñ–æ–Ω–¥', 'foundation']):
                    specific_activities.append('–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–æ–Ω–¥—ã')
            
            # –ê–Ω–∞–ª–∏–∑ –æ–±–ª–∞—Å—Ç–µ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –ø—Ä—è–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π)
            if has_direct_action:
                if any(word in text for word in ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'education', '—à–∫–æ–ª–∞', '—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç', '–æ–±—É—á–µ–Ω–∏–µ']):
                    charity_areas.add('–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')
                if any(word in text for word in ['–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', 'health', '–º–µ–¥–∏—Ü–∏–Ω–∞', '–±–æ–ª—å–Ω–∏—Ü–∞', '–ª–µ—á–µ–Ω–∏–µ']):
                    charity_areas.add('–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ')
                if any(word in text for word in ['—Å–ø–æ—Ä—Ç', 'sport', '–∫–æ–º–∞–Ω–¥–∞', '—Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏–µ', '—Ç—É—Ä–Ω–∏—Ä']):
                    charity_areas.add('—Å–ø–æ—Ä—Ç')
                if any(word in text for word in ['–∫—É–ª—å—Ç—É—Ä–∞', 'culture', '–∏—Å–∫—É—Å—Å—Ç–≤–æ', '—Ç–µ–∞—Ç—Ä', '–º—É–∑–µ–π']):
                    charity_areas.add('–∫—É–ª—å—Ç—É—Ä–∞')
                if any(word in text for word in ['—ç–∫–æ–ª–æ–≥–∏—è', 'environment', '–ø—Ä–∏—Ä–æ–¥–∞', '–æ–∫—Ä—É–∂–∞—é—â–∞—è —Å—Ä–µ–¥–∞']):
                    charity_areas.add('—ç–∫–æ–ª–æ–≥–∏—è')
                if any(word in text for word in ['–¥–µ—Ç–∏', 'children', '–¥–µ—Ç—Å–∫–∏–π', '–º–æ–ª–æ–¥–µ–∂—å']):
                    charity_areas.add('–ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–µ—Ç–µ–π –∏ –º–æ–ª–æ–¥–µ–∂–∏')
        
        # üéØ –°–¢–†–û–ì–ò–ï –ö–†–ò–¢–ï–†–ò–ò –¥–ª—è —Å–≤–æ–¥–∫–∏
        if direct_evidence_count > 0:
            areas_text = ", ".join(charity_areas) if charity_areas else "—Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å"
            activities_text = ", ".join(set(specific_activities)) if specific_activities else "–±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤—ã"
            
            final_summary_for_response = (
                f"–ù–ê–ô–î–ï–ù–´ –ü–†–Ø–ú–´–ï –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í–ê –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–æ–º–ø–∞–Ω–∏–∏ '{company_name}'.\n\n"
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {direct_evidence_count} –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ "
                f"(–∏–∑ {len(all_search_results)} –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤).\n\n"
                f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activities_text}\n"
                f"–û–±–ª–∞—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {areas_text}\n\n"
                f"–ö–æ–º–ø–∞–Ω–∏—è –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é. "
                f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑—É—á–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –æ—Ç–¥–µ–ª –ö–°–û –∫–æ–º–ø–∞–Ω–∏–∏."
            )
        else:
            final_summary_for_response = (
                f"–ù–∞–π–¥–µ–Ω–æ {len(all_search_results)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ '{company_name}' –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, "
                f"–ù–û –ù–ï–¢ –ü–†–Ø–ú–´–• –î–û–ö–ê–ó–ê–¢–ï–õ–¨–°–¢–í –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.\n\n"
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–æ—Å–∏—Ç –æ–±—â–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä (—É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Å–ø–∏—Å–∫–∞—Ö, –Ω–æ–≤–æ—Å—Ç–∏ –±–µ–∑ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π, "
                f"–¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ –æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤).\n\n"
                f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏."
            )

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)
    total_queries = len(search_queries)
    total_results = len(all_search_results)
    
    if not all_search_results:
        print(f"üîç [CHARITY_RESEARCH] –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ '{company_name}': 0 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ {total_queries} –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        print(f"üìä [CHARITY_RESEARCH] –≠–∫–æ–Ω–æ–º–∏—è API –∫–≤–æ—Ç: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ 8-12")
        return CompanyCharityResponse(
            status="success",
            company_name=company_name,
            charity_info=[],
            summary=final_summary_for_response
        )

    print(f"‚úÖ [CHARITY_RESEARCH] –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–ª—è '{company_name}': –Ω–∞–π–¥–µ–Ω–æ {total_results} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ {total_queries} –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"üìä [CHARITY_RESEARCH] –≠–∫–æ–Ω–æ–º–∏—è API –∫–≤–æ—Ç: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤ –≤–º–µ—Å—Ç–æ 8-12 (—ç–∫–æ–Ω–æ–º–∏—è ~{8-total_queries} –∑–∞–ø—Ä–æ—Å–æ–≤)")
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    areas = set()
    for result in all_search_results:
        text = (result.title + " " + result.snippet).lower()
        if any(word in text for word in ['–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', 'education']): areas.add('–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ')
        if any(word in text for word in ['–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ', 'health']): areas.add('–∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ')
        if any(word in text for word in ['—Å–ø–æ—Ä—Ç', 'sport']): areas.add('—Å–ø–æ—Ä—Ç')
        if any(word in text for word in ['–∫—É–ª—å—Ç—É—Ä–∞', 'culture']): areas.add('–∫—É–ª—å—Ç—É—Ä–∞')
        if any(word in text for word in ['—ç–∫–æ–ª–æ–≥–∏—è', 'environment']): areas.add('—ç–∫–æ–ª–æ–≥–∏—è')
    
    if areas:
        print(f"üìã [CHARITY_RESEARCH] –í—ã—è–≤–ª–µ–Ω–Ω—ã–µ –æ–±–ª–∞—Å—Ç–∏ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {', '.join(areas)}")

    return CompanyCharityResponse(
        status="success",
        company_name=company_name,
        charity_info=all_search_results,
        summary=final_summary_for_response
    ) 