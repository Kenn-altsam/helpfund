import google.generativeai as genai
from dotenv import load_dotenv
import os
import traceback

load_dotenv()

# Initialize Gemini API
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
if not GEMINI_API_KEY:
    print("‚ùå GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
else:
    genai.configure(api_key=GEMINI_API_KEY)
    print("‚úÖ Gemini API –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")

# Use different model for better performance
model = genai.GenerativeModel("gemini-1.5-flash")

def get_gemini_response(prompt: str) -> str:
    """
    Get response from Gemini AI with improved error handling
    """
    if not GEMINI_API_KEY:
        print("‚ùå Gemini API key not configured")
        return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Gemini API key not configured", "preliminary_response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."}'
    
    try:
        print(f"ü§ñ [GEMINI] Sending request to Gemini API (prompt: {len(prompt)} chars)")
        
        # Configure generation settings for better reliability
        generation_config = genai.types.GenerationConfig(
            temperature=0.1,
            top_p=0.8,
            top_k=40,
            max_output_tokens=2048,
        )
        
        response = model.generate_content(
            prompt,
            generation_config=generation_config,
            safety_settings=[
                {
                    "category": "HARM_CATEGORY_HARASSMENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_HATE_SPEECH",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                },
                {
                    "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                    "threshold": "BLOCK_MEDIUM_AND_ABOVE"
                }
            ]
        )
        
        # Check if response was blocked
        if response.prompt_feedback and response.prompt_feedback.block_reason:
            print(f"‚ö†Ô∏è Gemini blocked response: {response.prompt_feedback.block_reason}")
            return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Response blocked by safety filters", "preliminary_response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å."}'
        
        response_text = response.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not response_text or not response_text.strip():
            print("‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
            return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Empty response from Gemini", "preliminary_response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."}'
        
        print(f"‚úÖ [GEMINI] Successfully received response ({len(response_text)} chars)")
        return response_text
        
    except genai.types.BlockedPromptException as e:
        print(f"‚ùå Gemini blocked prompt: {e}")
        return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Prompt blocked by safety filters", "preliminary_response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å."}'
    
    except genai.types.StopCandidateException as e:
        print(f"‚ùå Gemini stopped generation: {e}")
        return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Generation stopped by safety filters", "preliminary_response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —Å–º–æ–≥ –∑–∞–≤–µ—Ä—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–ø—Ä–æ—Å–∞."}'
    
    except Exception as e:
        print(f"‚ùå Gemini error: {e}")
        print(f"üìã Error details:")
        traceback.print_exc()
        
        # Check for specific error types
        error_str = str(e).lower()
        if "quota" in error_str or "limit" in error_str:
            return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "API quota exceeded", "preliminary_response": "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."}'
        elif "authentication" in error_str or "api_key" in error_str:
            return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Authentication error", "preliminary_response": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–∞."}'
        elif "network" in error_str or "connection" in error_str:
            return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Network connection error", "preliminary_response": "–ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–∏—Å—É."}'
        else:
            # Generic fallback
            return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Gemini failed to respond", "preliminary_response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."}' 