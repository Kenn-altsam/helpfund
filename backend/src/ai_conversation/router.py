from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
import traceback
import uuid

from .models import ChatRequest, ChatResponse, CompanyCharityRequest, CompanyCharityResponse
# !!! –ò–ú–ü–û–†–¢–ò–†–£–ï–ú –ù–ê–® –ì–õ–ê–í–ù–´–ô –°–ï–†–í–ò–° !!!
from .service import ai_service
from ..core.database import get_db
from ..auth.models import User
from ..auth.dependencies import get_current_user
from ..chats import service as chat_service  # –°–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–æ–≤

router = APIRouter(prefix="/ai", tags=["AI Conversation"])


# ============================================================================== 
# === –ù–û–í–´–ô, –ü–†–ê–í–ò–õ–¨–ù–´–ô –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ü–û–ò–°–ö–ê –ö–û–ú–ü–ê–ù–ò–ô –ß–ï–†–ï–ó –ë–î ===
# ==============================================================================
@router.post("/chat", response_model=ChatResponse)
async def handle_chat_with_database_search(
    request: ChatRequest,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    """
    Handles a conversation turn by parsing user intent, searching the database for companies,
    and generating a response. This is the main endpoint for company search.
    """
    print(f"\U0001F4AC [CHAT_DB] New request from user {current_user.id}: '{request.user_input[:100]}...'")

    if not request.user_input.strip():
        raise HTTPException(status_code=400, detail="User input cannot be empty")

    try:
        # 1. –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID —á–∞—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        db_chat_id = None
        if request.chat_id:
            try:
                db_chat_id = uuid.UUID(request.chat_id)
            except ValueError:
                raise HTTPException(status_code=400, detail="Invalid chat_id format. Must be a UUID.")
        else:
            # –ï—Å–ª–∏ ID —á–∞—Ç–∞ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç –≤ –ë–î
            chat_name = request.user_input[:100]
            new_chat = chat_service.create_chat(
                db=db,
                user_id=current_user.id,
                name=chat_name
            )
            db_chat_id = new_chat.id
            print(f"üÜï [CHAT_DB] Created new chat session '{chat_name}' with ID: {db_chat_id}")

        # 2. –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –∏–∑ ai_service.py
        # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –∏—â–µ—Ç –≤ –ë–î –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response_data = await ai_service.handle_conversation_turn(
            user_input=request.user_input,
            history=request.history,
            db=db,
            conversation_id=str(db_chat_id)
        )
        
        # 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞
        # –≠—Ç–æ –≤–∞–∂–Ω–æ, —Ç–∞–∫ –∫–∞–∫ —Å–µ—Ä–≤–∏—Å –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é –∏ –∑–∞–ø—Ä–æ—Å, –∏ –æ—Ç–≤–µ—Ç
        last_user_message = next((msg for msg in reversed(response_data['updated_history']) if msg['role'] == 'user'), None)
        last_assistant_message = next((msg for msg in reversed(response_data['updated_history']) if msg['role'] == 'assistant'), None)

        if last_user_message:
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω—É–∂–Ω—ã
            chat_service.create_message(
                db=db,
                chat_id=db_chat_id,
                content=last_user_message['content'],
                role='user',
                metadata=None # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –∏—Ö –Ω–µ—Ç
            )

        if last_assistant_message:
            # –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø–µ—Ä–µ–¥–∞–µ–º –∫–∞–∫ metadata
            companies_data = response_data.get('companies', [])
            chat_service.create_message(
                db=db,
                chat_id=db_chat_id,
                content=last_assistant_message['content'],
                role='assistant',
                metadata={"companies": companies_data}
            )

        # 4. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        final_response = ChatResponse(
            message=response_data.get('message'),
            companies=response_data.get('companies', []),
            updated_history=response_data.get('updated_history', []),
            assistant_id=None, # –£ –≤–∞—Å –Ω–µ—Ç OpenAI Assistant ID –≤ —ç—Ç–æ–π –ª–æ–≥–∏–∫–µ
            chat_id=str(db_chat_id),
            openai_thread_id=None
        )

        print(f"‚úÖ [CHAT_DB] Successfully processed request. Found {len(final_response.companies)} companies.")
        return final_response

    except Exception as e:
        print(f"‚ùå [CHAT_DB] Critical error in chat endpoint: {e}")
        traceback.print_exc()
        raise HTTPException(status_code=500, detail="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")


# ============================================================================== 
# === –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ë–õ–ê–ì–û–¢–í–û–†–ò–¢–ï–õ–¨–ù–û–°–¢–ò (–û–°–¢–ê–í–õ–Ø–ï–ú –ö–ê–ö –ï–°–¢–¨) ===
# ==============================================================================
@router.post("/charity-research", response_model=CompanyCharityResponse)
async def get_company_charity_info(
    request: CompanyCharityRequest,
    current_user: User = Depends(get_current_user)
):
    # ... –≤–∞—à –∫–æ–¥ –¥–ª—è /charity-research –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    # –Ø –µ–≥–æ —É–±—Ä–∞–ª –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏, –Ω–æ —É –≤–∞—Å –æ–Ω –¥–æ–ª–∂–µ–Ω –æ—Å—Ç–∞—Ç—å—Å—è
    import os
    import httpx
    # ... –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ
    # –ü—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å—é–¥–∞ –≤—Å—é –≤–∞—à—É —Ñ—É–Ω–∫—Ü–∏—é get_company_charity_info

    # Placeholder for the original code
    print(f"\U0001F50D [CHARITY_RESEARCH] Starting research for company: '{request.company_name}'")
    # ... (–∑–¥–µ—Å—å –≤–µ—Å—å –≤–∞—à –∫–æ–¥ –∏–∑ get_company_charity_info)
    # –≠—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –¥–ª—è —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Google/Gemini.
    # –û–Ω –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ø–æ–∏—Å–∫–æ–º –ø–æ –≤–∞—à–µ–π –ë–î.
    
    # –ß—Ç–æ–±—ã –Ω–µ –≤—ã–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É, –≤–µ—Ä–Ω–µ–º –∑–∞–≥–ª—É—à–∫—É. –£ –í–ê–° –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –í–ê–® –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ô –ö–û–î.
    return CompanyCharityResponse(
        status="success",
        answer="–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–ª–∞—Å—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏."
    ) 