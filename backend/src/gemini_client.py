import time
import requests
import json
import os
from typing import Dict, Any, Optional
from dotenv import load_dotenv

load_dotenv()

GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
GEMINI_BASE_URL = "https://generativelanguage.googleapis.com/v1beta"


def call_gemini_with_retry(payload: dict, max_attempts: int = 3, backoff: int = 2) -> dict:
    url = f"{GEMINI_BASE_URL}/models/gemini-1.5-pro:generateContent?key={GEMINI_API_KEY}"
    headers = {"Content-Type": "application/json"}
    for attempt in range(1, max_attempts + 1):
        try:
            response = requests.post(url, headers=headers, json=payload)
            response.raise_for_status()
            print(f"‚úÖ Gemini responded on attempt {attempt}")
            return response.json()
        except requests.HTTPError as e:
            status = e.response.status_code if e.response else None
            if status == 429:
                wait = backoff ** attempt
                print(f"‚ö†Ô∏è Gemini 429 Too Many Requests. Retrying in {wait}s...")
                time.sleep(wait)
            elif status and 500 <= status < 600:
                wait = backoff ** attempt
                print(f"‚ö†Ô∏è Gemini {status} Server Error. Retrying in {wait}s...")
                time.sleep(wait)
            else:
                print(f"‚ùå Gemini error: {e}")
                raise
        except Exception as e:
            print(f"‚ùå Unexpected Gemini error: {e}")
            raise
    raise Exception("‚ùå Gemini API failed after max retries.")


def get_gemini_response(prompt: str) -> str:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π Gemini API —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å retry-–æ–±—ë—Ä—Ç–∫–æ–π
    """
    try:
        payload = {
            "contents": [
                {
                    "parts": [
                        {
                            "text": prompt
                        }
                    ]
                }
            ],
            "generationConfig": {
                "temperature": 0.1,
                "topK": 1,
                "topP": 1,
                "maxOutputTokens": 2048,
            }
        }
        data = call_gemini_with_retry(payload)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞ Gemini
        if "candidates" in data and len(data["candidates"]) > 0:
            candidate = data["candidates"][0]
            if "content" in candidate and "parts" in candidate["content"]:
                parts = candidate["content"]["parts"]
                if len(parts) > 0 and "text" in parts[0]:
                    response_text = parts[0]["text"]
                    if not response_text or not response_text.strip():
                        print("‚ö†Ô∏è Gemini –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
                        raise ValueError("Empty response from Gemini")
                    return response_text
        print("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ Gemini")
        raise ValueError("Unexpected Gemini response structure")
    except Exception as e:
        print(f"‚ùå Gemini error: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–π JSON-–∑–∞–≥–ª—É—à–∫—É –ø—Ä–∏ –ª—é–±—ã—Ö –æ—à–∏–±–∫–∞—Ö
        return '{"intent": "unclear", "location": null, "activity_keywords": null, "quantity": null, "page_number": 1, "reasoning": "Gemini failed to respond", "preliminary_response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å."}'

def create_gemini_assistant(name: str, instructions: str) -> str:
    """
    –≠–º—É–ª–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ assistant_id –¥–ª—è Gemini
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç UUID –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ assistant_id
    """
    import uuid
    assistant_id = str(uuid.uuid4())
    print(f"ü§ñ [GEMINI] Created emulated assistant_id: {assistant_id}")
    return assistant_id

def create_gemini_thread() -> str:
    """
    –≠–º—É–ª–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ thread_id –¥–ª—è Gemini
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç UUID –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ thread_id
    """
    import uuid
    thread_id = str(uuid.uuid4())
    print(f"ü§ñ [GEMINI] Created emulated thread_id: {thread_id}")
    return thread_id

def run_gemini_assistant(assistant_id: str, thread_id: str, user_input: str, history: Optional[list] = None) -> Dict[str, Any]:
    """
    –≠–º—É–ª–∏—Ä—É–µ—Ç –∑–∞–ø—É—Å–∫ assistant —Å Gemini API
    assistant_id –∏ thread_id - —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–µ UUID –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        if history:
            context = "\n".join([f"{msg.get('role', 'user')}: {msg.get('content', '')}" for msg in history[-5:]])  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            full_prompt = f"Context:\n{context}\n\nUser: {user_input}\n\nAssistant:"
        else:
            full_prompt = f"User: {user_input}\n\nAssistant:"
        
        # –í—ã–∑—ã–≤–∞–µ–º Gemini API
        response_text = get_gemini_response(full_prompt)
        
        return {
            "response": response_text,
            "assistant_id": assistant_id,  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ assistant_id
            "thread_id": thread_id,       # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ—Ç –∂–µ thread_id
            "success": True
        }
        
    except Exception as e:
        print(f"‚ùå Error running Gemini assistant: {e}")
        return {
            "response": "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.",
            "assistant_id": assistant_id,
            "thread_id": thread_id,
            "success": False,
            "error": str(e)
        } 