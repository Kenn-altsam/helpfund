
# Use version 3.8 or higher to ensure healthcheck features are fully supported
version: "3.8"

services:
  # --- Database Service (PostgreSQL) ---
  db:
    image: postgres:15
    container_name: ayala_db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      # Expose port to the host machine for local development/debugging
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ayala-net

    # --- ADDED HEALTHCHECK ---
    # This check will run inside the container to see if Postgres is ready.
    # --- THIS IS THE FIRST KEY FIX ---
    # This healthcheck ensures the backend waits until Postgres is truly ready.

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 5s
      timeout: 5s
      retries: 5



  # --- Backend Service (FastAPI) ---

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ayala_backend
    restart: unless-stopped
    # This tells Docker to wait for the 'db' service to be 'healthy' before starting.
    depends_on:
      db:
        condition: service_healthy
    # We explicitly define the environment variables the backend needs.
    environment:
      # The DATABASE_URL is now the single source of truth for the connection.
      # It uses the correct driver ('psycopg2') and hostname ('db').
      DATABASE_URL: "postgresql+psycopg2://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}"
      
      # Pass other required variables from your .env file
      SECRET_KEY: ${SECRET_KEY}
      ALGORITHM: ${ALGORITHM}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${ACCESS_TOKEN_EXPIRE_MINUTES}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS}
      DEBUG: ${DEBUG}
      
      # --- ADDED: Keys for Google and Gemini services ---
      GOOGLE_API_KEY: ${GOOGLE_API_KEY}
      GOOGLE_SEARCH_ENGINE_ID: ${GOOGLE_SEARCH_ENGINE_ID}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
    ports:
      - "8000:8000"
    networks:
      - ayala-net

  # --- Frontend Service (React/Vite + Nginx) ---
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      args:
        VITE_API_BASE_URL: /api
    container_name: ayala_frontend
    restart: unless-stopped
    depends_on:
      - backend
    ports:
      - "5173:80"
    networks:
      - ayala-net

# --- Define top-level volumes and networks ---
volumes:
  postgres_data:

networks:
  ayala-net:
    name: ayala-network
